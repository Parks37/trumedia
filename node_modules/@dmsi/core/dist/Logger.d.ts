declare type LogLevel = 0 | 1 | 2 | 3;
export declare type Log = {
    context: string;
    environment?: string;
    level: LogLevel;
    message: string;
    transactionID: string;
    username?: string;
};
export declare type LoggerOptions = {
    batchSize?: number;
    environment?: string;
    headers?: Record<string, string>;
    url: string;
    username?: string;
    level?: LogLevel;
};
declare type Storage = {
    getItem: (key: string) => any;
    setItem: (key: string, value: any) => void;
};
declare class Logger {
    batchSize: number;
    environment: string | undefined;
    headers: Object;
    storage: Storage;
    url: string;
    username: string | undefined;
    websocket: WebSocket;
    static get ERROR(): LogLevel;
    static get INFO(): LogLevel;
    static get DEBUG(): LogLevel;
    static get TRACE(): LogLevel;
    constructor(options: LoggerOptions, Websocket?: any, localStorage?: Storage);
    batchLogs(logs?: Log[]): Log[][];
    log(message: string, level: LogLevel, tranID?: string): void;
    send(logs: Log[], flushing?: boolean): void;
    setEnvironment(environment: string): void;
    setUsername(username: string): void;
    error(message: string, tranID?: string): void;
    info(message: string, tranID?: string): void;
    debug(message: string, tranID?: string): void;
    trace(message: string, tranID?: string): void;
}
export default Logger;
