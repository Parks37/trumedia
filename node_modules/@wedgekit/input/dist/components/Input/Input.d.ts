import React, { InputHTMLAttributes } from 'react';
export declare type InputProps = {
    /**
     * Additional CSS classes for the `<input>` element
     */
    className?: string;
    /**
     * Optional prop, to specify stylings
     */
    disabled?: boolean;
    /**
     * The forwarded ref.
     */
    forwardRef?: React.Ref<HTMLInputElement>;
    /**
     * Whether the input fill the width of its parent.
     */
    fullWidth?: boolean;
    /**
     * Optional element id. If not specified a value will be generated.
     */
    id?: string;
    /**
     * Information to populate the info tooltip.
     */
    info?: {
        title: string;
        content?: string;
        link?: {
            url: string;
            label: string;
        };
    };
    /**
     * No longer supported. Instead pass 'status'="error". To be removed in v3.0.0
     */
    invalid?: boolean;
    /**
     * Unique text that clearly identifies the purpose and use of the input
     */
    label: string;
    /**
     * Whether or not to visibly display the label. Label will always
     * be available to users of screen readers via aria-label.
     */
    labelHidden?: boolean;
    /**
     * Indicates whether the input's label will display inline with it to its left
     */
    labelInline?: boolean;
    /**
     * Called when the user exits the input field
     */
    onBlur?: (event: React.FocusEvent) => void;
    /**
     * Called every time the user changes the input value. Should be used to respond to individual
     * keystrokes; in many cases onSubmit is preferable.
     */
    onChange: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * Called when the user enters the input field
     */
    onFocus?: (event: React.SyntheticEvent) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    /**
     * Called when the user either presses enter or clicks on the (optional) icon.
     */
    onSubmit?: (value: string, event: React.SyntheticEvent) => void;
    /**
     * Default placeholding text
     */
    placeholder?: string;
    /**
     * Indicated read only state for styling
     */
    readOnly?: boolean;
    /**
     * A render prop for optionally displaying an icon within the input
     */
    renderIcon?: () => React.ReactElement;
    /**
     * Indicates whether or not the input is required.
     */
    required?: boolean;
    /**
     * Indicates the validation status.
     */
    status?: 'default' | 'error' | 'success' | 'pending';
    /**
     * Property used if you want to break accessibility.
     */
    tabIndex?: number;
    /**
     * Value is a value that allows the state of the input to be controlled
     * externally
     */
    value: string;
} & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'onSubmit'>;
declare const _default: React.ForwardRefExoticComponent<Omit<InputProps, "forwardRef"> & React.RefAttributes<HTMLInputElement>>;
export default _default;
