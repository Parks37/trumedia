import React from 'react';
declare const _default: React.ForwardRefExoticComponent<{
    disabled?: boolean | undefined;
    readOnly?: boolean | undefined;
    forwardedRef?: React.Ref<HTMLInputElement> | undefined;
    maxLength?: number | undefined;
    tabIndex?: number | undefined;
} & {
    className?: string | undefined;
    disabled?: boolean | undefined;
    forwardRef?: React.Ref<HTMLInputElement> | undefined;
    fullWidth?: boolean | undefined;
    id?: string | undefined;
    info?: {
        title: string;
        content?: string | undefined;
        link?: {
            url: string;
            label: string;
        } | undefined;
    } | undefined;
    invalid?: boolean | undefined;
    label: string;
    labelHidden?: boolean | undefined;
    labelInline?: boolean | undefined;
    onBlur?: ((event: React.FocusEvent<Element>) => void) | undefined;
    onChange: (value: string, event: React.ChangeEvent<HTMLInputElement>) => void;
    onFocus?: ((event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<HTMLInputElement>) => void) | undefined;
    onSubmit?: ((value: string, event: React.SyntheticEvent<Element, Event>) => void) | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    renderIcon?: (() => React.ReactElement<any, string | React.JSXElementConstructor<any>>) | undefined;
    required?: boolean | undefined;
    status?: "default" | "error" | "success" | "pending" | undefined;
    tabIndex?: number | undefined;
    value: string;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange" | "onSubmit"> & React.RefAttributes<HTMLInputElement>>;
export default _default;
