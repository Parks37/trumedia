// src/components/Multiselect/Multiselect.tsx
import React5 from "react";
import {browser} from "@dmsi/core";

// src/components/shared/Dropdown/Dropdown.tsx
import React3, {useRef as useRef2, useState as useState2} from "react";
import mergeRefs from "react-merge-refs";
import {v4 as uuid} from "uuid";
import {Chevron} from "@wedgekit/icons";
import InfoButton from "@wedgekit/info-button";
import primitives4, {FieldStatusWrapper, Row} from "@wedgekit/primitives";
import {handleKeyEvent} from "@wedgekit/utils";

// src/components/shared/Dropdown/styled/Badge.tsx
import styled from "styled-components";
import color from "@wedgekit/color";
import primitives, {getBasePx} from "@wedgekit/primitives";
var Badge = styled.div`
  grid-column: 2/3;
  margin-right: ${getBasePx(3)};
  height: ${getBasePx(6)};
  border-radius: ${primitives.base * 3}px;
  text-align: center;
  background-color: ${color.B200};
  color: ${color.B600};
  font-family: ${primitives.fontFamily};
  font-weight: ${primitives.fontWeight.link};
  line-height: 1.5rem;
  font-size: ${primitives.fontSize.input}px;
  ${({children}) => {
  const charCount = (children == null ? void 0 : children.toString().length) || 0;
  return `width: ${primitives.base * (4 + 2 * charCount)}px;`;
}};
`;
var Badge_default = Badge;

// src/components/shared/Dropdown/styled/Caret.tsx
import styled2 from "styled-components";
import {getBasePx as getBasePx2} from "@wedgekit/primitives";
var Caret = styled2.div`
  grid-column: 3/4;
  height: ${getBasePx2(4)};
  width: ${getBasePx2(4)};
`;
var Caret_default = Caret;

// src/components/shared/Dropdown/styled/DropdownWrapper.tsx
import styled3 from "styled-components";
import color2 from "@wedgekit/color";
import primitives2, {UpdatedInputMixin, getBasePx as getBasePx3} from "@wedgekit/primitives";
var Dropdown = styled3.div`
  cursor: pointer;
  ${UpdatedInputMixin}
  align-items: center;
  display: inline-grid;
  grid-template-columns: minmax(0, 1fr) min-content min-content;
  padding: 0 ${getBasePx3(3)};
  width: 100%;
  border: ${({disabled, popoverOpen}) => !disabled && popoverOpen && `${primitives2.border.width.standard}px solid ${color2.B500}`};
  box-shadow: ${({disabled, popoverOpen}) => !disabled && popoverOpen && `inset 0 0 0 .5px ${color2.B500}`};
  &:focus {
  }
`;
var DropdownWrapper_default = Dropdown;

// src/components/shared/Dropdown/styled/DropdownText.ts
import styled4 from "styled-components";
import {Text} from "@wedgekit/primitives";
import colors from "@wedgekit/color";
var DropdownText = styled4(Text)`
  color: ${({disabled, isPlaceholder}) => (disabled || isPlaceholder) && colors.N400};
  grid-column: 1/2;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
`;
var DropdownText_default = DropdownText;

// src/components/shared/Dropdown/styled/Label.tsx
import styled5 from "styled-components";
import {Label as BaseLabel} from "@wedgekit/primitives";
var Label = styled5(BaseLabel)``;
var Label_default = Label;

// src/components/shared/List/List.tsx
import React2, {useEffect as useEffect2, useRef, useState} from "react";
import Button from "@wedgekit/button";
import {useContainerEvent} from "@wedgekit/hooks";

// src/components/shared/List/utils/getNewValue.ts
var getNewValue = ({
  multiple = false,
  options,
  filteredOptions = options,
  currentIdx,
  previousIdx,
  shiftDown,
  value
}) => {
  if (!multiple) {
    return [filteredOptions[currentIdx].id];
  }
  const [startChangeIdx, endChangeIdx] = [currentIdx, previousIdx].sort();
  return options.reduce((newValue, option) => {
    const currentlySelected = value.includes(option.id);
    const optionIdx = filteredOptions.findIndex((filteredOption) => filteredOption.id === option.id);
    if (typeof optionIdx !== "number") {
      if (currentlySelected) {
        return newValue.concat(option.id);
      }
      return newValue;
    }
    if (shiftDown) {
      const addOption2 = startChangeIdx <= optionIdx && optionIdx <= endChangeIdx;
      if (currentlySelected || addOption2) {
        return newValue.concat(option.id);
      }
    }
    const toggleOption = currentIdx === optionIdx;
    const addOption = currentlySelected || toggleOption;
    const removeOption = currentlySelected && toggleOption;
    if (addOption && !removeOption) {
      return newValue.concat(option.id);
    }
    return newValue;
  }, []);
};
var getNewValue_default = getNewValue;

// src/components/shared/List/utils/getNewIndex.ts
var getNewIndex_default = (startIdx, move, listLength) => {
  const a = startIdx + move;
  const n = listLength;
  return (a % n + n) % n;
};

// src/components/shared/List/utils/withEscapeWatcher.tsx
import React, {useEffect} from "react";
var withEscapeWatcher = (Component) => (props) => {
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        e.stopPropagation();
        if (props.onEscape) {
          props.onEscape(e);
        }
        if (props.toggleRef && props.toggleRef.current) {
          props.toggleRef.current.focus();
        }
      }
    };
    window.addEventListener("keydown", handleKeyDown, true);
    return () => window.removeEventListener("keydown", handleKeyDown, true);
  }, []);
  return /* @__PURE__ */ React.createElement(Component, {
    ...props
  });
};
var withEscapeWatcher_default = withEscapeWatcher;

// src/components/shared/List/styled/ActionBar.tsx
import styled6 from "styled-components";
import {getBasePx as getBasePx4} from "@wedgekit/primitives";
var ActionBar = styled6.div`
  position: relative;
  display: flex;
  justify-content: center;
  button {
    margin: ${getBasePx4(2)};
  }
  box-shadow: 0 -2px 4px 0 rgba(0, 0, 0, 0.1);
`;
var ActionBar_default = ActionBar;

// src/components/shared/List/styled/Filter.tsx
import styled7 from "styled-components";
import Input from "@wedgekit/input";
import {getBasePx as getBasePx5} from "@wedgekit/primitives";
var Filter = styled7(Input)`
  margin-top: 0px;
  margin-bottom: ${getBasePx5(3)};
`;
var Filter_default = Filter;

// src/components/shared/List/styled/MultiselectOption.tsx
import styled8 from "styled-components";
import Checkbox, {StyledLabel} from "@wedgekit/checkbox";
import color3 from "@wedgekit/color";
var getBackgroundColor = (active, value) => {
  if (value) {
    if (active) {
      return color3.B100;
    }
    return color3.B200;
  }
  if (active) {
    return color3.N100;
  }
  return color3.N050;
};
var MultiselectOption = styled8(Checkbox)`
  box-sizing: border-box;
  margin-bottom: 4px;
  padding: 0 4px;
  width: 100%;

  &::first-child {
    margin-top: 12px;
  }

  &:last-child {
    margin-bottom: 0px;
  }

  ${StyledLabel} {
    background: ${({active, value}) => getBackgroundColor(active, value)};
    font-weight: 400;
    user-select: none;
    margin: 0 -16px;
    border-radius: 0;
    padding: 6px 12px;

    &:hover {
      background: ${({value}) => value ? color3.B100 : color3.N100};
      label {
        color: ${color3.N600};
      }
    }
  }
`;
var MultiselectOption_default = MultiselectOption;

// src/components/shared/List/styled/OptionList.tsx
import styled9 from "styled-components";
var OptionList_default = styled9.div`
  &:focus {
    outline: none;
  }
`;

// src/components/shared/List/styled/OptionText.tsx
import styled10 from "styled-components";
import {Text as Text2} from "@wedgekit/primitives";
var OptionText = styled10(Text2)`
  pointer-events: none;
  margin: 8px 0px;
  line-height: 1.5rem;

  &:focus {
    outline: none;
  }
`;
var OptionText_default = OptionText;

// src/components/shared/List/styled/OptionsWrapper.tsx
import styled11 from "styled-components";
import {InputWrapper} from "@wedgekit/input";
import primitives3, {getBasePx as getBasePx6} from "@wedgekit/primitives";
var OptionWrapper = styled11.div`
  overflow-y: auto;
  max-height: 30vh;
  width: ${({toggleRef}) => toggleRef.current && `${toggleRef.current.clientWidth - primitives3.base * 6}px`};
  padding: ${getBasePx6(3)};

  ${InputWrapper} {
    margin: 0px;
  }
`;
var OptionsWrapper_default = OptionWrapper;

// src/components/shared/List/styled/SelectOption.tsx
import styled12 from "styled-components";
import color4 from "@wedgekit/color";
import {CursorMixin, getBasePx as getBasePx7} from "@wedgekit/primitives";
var getBackgroundColor2 = (value, active) => {
  if (value) {
    if (active) {
      return color4.B100;
    }
    return color4.B200;
  }
  if (active) {
    return color4.N100;
  }
  return color4.N050;
};
var SelectOption = styled12.div`
  align-content: center;
  background: ${({value, active}) => getBackgroundColor2(value, active)};
  cursor: pointer;
  display: flex;
  margin: 0 -${getBasePx7(3)} ${getBasePx7(1)} -${getBasePx7(3)};
  padding: 0 ${getBasePx7(3)};
  ${CursorMixin};
  transition: background 0.2s ease-out;

  & div {
    flex: 1;
  }

  &:focus {
    outline: none;
  }

  label {
    font-weight: normal;
    &:focus {
      color: ${color4.N600};
    }
  }

  &:hover {
    background: ${({value}) => value ? color4.B100 : color4.N100};
    label {
      color: ${color4.N600};
    }
  }
`;
var SelectOption_default = SelectOption;

// src/components/shared/List/styled/Space.tsx
import styled13 from "styled-components";
var Space = styled13.div`
  flex: 1;
`;
var Space_default = Space;

// src/components/shared/List/styled/StyledPopover.tsx
import styled14 from "styled-components";
import color5 from "@wedgekit/color";
import Popover from "@wedgekit/popover";
var StyledPopover_default = styled14(Popover)`
  background: ${color5.N050};
`;

// src/components/shared/List/List.tsx
var List = (props) => {
  const {
    actionBar,
    filter: displayFilter,
    filterPlaceholder,
    label,
    multiple,
    options,
    toggleRef,
    value,
    onBlur,
    onChange,
    onEscape,
    onSelect
  } = props;
  const activeOptionRef = useRef(null);
  const internalFocusRef = useRef(null);
  const checkboxListRef = useRef(null);
  const filterRef = useRef(null);
  const [filter, setFilter] = useState("");
  const [filteredOptions, setFilteredOptions] = useState(options.filter((option) => option.label.toLowerCase().includes(filter.toLowerCase())));
  const [activeOptionIdx, setActiveOptionIdx] = useState(!!value === !![] ? 0 : filteredOptions.findIndex((option) => value.includes(option.id)));
  const [allSelected, setAllSelected] = useState(value === filteredOptions.map((option) => option.id));
  useEffect2(() => {
    var _a;
    (_a = activeOptionRef.current) == null ? void 0 : _a.scrollIntoView({behavior: "smooth", block: "nearest"});
  }, [activeOptionIdx]);
  useEffect2(() => {
    if (displayFilter) {
      filterRef.current.focus();
    } else {
      checkboxListRef.current.focus();
    }
  }, []);
  useContainerEvent(internalFocusRef, {
    scroll: (e, inside) => {
      if (!inside && onEscape) {
        onEscape(e);
      }
    }
  });
  const handleFilterChange = (newFilter) => {
    setFilter(newFilter);
    setFilteredOptions(options.filter((option) => option.label.toLowerCase().includes(newFilter.toLowerCase())));
  };
  const handleClick = (event) => {
    const option = event.target;
    const currentIdx = parseInt(option.getAttribute("data-idx"), 10);
    const newValue = getNewValue_default({
      multiple,
      options,
      filteredOptions,
      currentIdx,
      previousIdx: activeOptionIdx,
      shiftDown: event.shiftKey,
      value
    });
    onChange(newValue, event);
    if (onSelect) {
      onSelect(event);
    }
    setActiveOptionIdx(currentIdx);
  };
  const handleKeyDown = (event) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setActiveOptionIdx(getNewIndex_default(activeOptionIdx, 1, filteredOptions.length));
        break;
      case "ArrowUp":
        event.preventDefault();
        setActiveOptionIdx(getNewIndex_default(activeOptionIdx, -1, filteredOptions.length));
        break;
      case "End":
        event.preventDefault();
        setActiveOptionIdx(filteredOptions.length - 1);
        break;
      case "Home":
        event.preventDefault();
        setActiveOptionIdx(0);
        break;
      case " ":
      case "SpaceBar":
        event.preventDefault();
        activeOptionRef.current.click();
        break;
      default:
    }
  };
  const handleClearAll = (event) => {
    setAllSelected(false);
    onChange([], event);
  };
  const handleSelectAll = (event) => {
    if (allSelected) {
      handleClearAll(event);
    } else {
      const allValues = filteredOptions.reduce((acc, cur) => {
        acc.push(cur.id);
        return acc;
      }, []);
      setAllSelected(true);
      onChange(allValues, event);
    }
  };
  const handleBlur = (event) => {
    const internalFocus = !!internalFocusRef.current && event.relatedTarget instanceof Node && internalFocusRef.current.contains(event.relatedTarget);
    if (!internalFocus && onBlur) {
      onBlur(event);
    }
  };
  return /* @__PURE__ */ React2.createElement(StyledPopover_default, {
    node: toggleRef.current,
    ref: internalFocusRef,
    onExit: onEscape,
    enabled: false
  }, /* @__PURE__ */ React2.createElement(OptionsWrapper_default, {
    "data-parent": label,
    toggleRef,
    tabIndex: -1,
    onBlur: handleBlur
  }, displayFilter && /* @__PURE__ */ React2.createElement(Filter_default, {
    "data-parent": label,
    fullWidth: true,
    label: `Filter ${label} select`,
    labelHidden: true,
    placeholder: filterPlaceholder || "Search",
    ref: filterRef,
    value: filter,
    onChange: (newFilter) => {
      handleFilterChange(newFilter);
    },
    onKeyDown: handleKeyDown,
    status: "default"
  }), /* @__PURE__ */ React2.createElement(OptionList_default, {
    "aria-label": label,
    "data-parent": label,
    id: `${label}-listbox`,
    role: "listbox",
    ref: checkboxListRef,
    tabIndex: displayFilter ? -1 : 0,
    onKeyDown: handleKeyDown
  }, filteredOptions.map((option, idx) => multiple ? /* @__PURE__ */ React2.createElement(MultiselectOption_default, {
    active: activeOptionIdx === idx,
    "data-idx": idx,
    "data-parent": label,
    disabled: option.disabled,
    id: `${label}-${option.id}`,
    key: `option-${option.id}`,
    label: option.label,
    name: option.id,
    ref: idx === activeOptionIdx ? activeOptionRef : void 0,
    role: "option",
    tabIndex: -1,
    value: multiple ? value.includes(option.id) : value[0] === option.id,
    onChange: () => {
    },
    onClick: handleClick
  }) : /* @__PURE__ */ React2.createElement(SelectOption_default, {
    active: activeOptionIdx === idx,
    "aria-label": option.label,
    "aria-selected": value[0] === option.id,
    "data-parent": label,
    "data-idx": idx,
    disabled: option.disabled,
    id: `${option.id}`,
    key: `option-${option.id}`,
    ref: idx === activeOptionIdx ? activeOptionRef : void 0,
    role: "option",
    tabIndex: -1,
    value: value[0] === option.id,
    onClick: handleClick
  }, /* @__PURE__ */ React2.createElement(OptionText_default, {
    "data-parent": label,
    tabIndex: -1
  }, option.label))))), multiple && !!actionBar && /* @__PURE__ */ React2.createElement(ActionBar_default, {
    "data-parent": label,
    toggleRef,
    onBlur: handleBlur
  }, (typeof actionBar === "boolean" || actionBar.selectAll) && /* @__PURE__ */ React2.createElement(Button, {
    "data-parent": label,
    domain: "secondary",
    variant: "noFill",
    onClick: handleSelectAll
  }, typeof actionBar === "object" && actionBar.selectAll && typeof actionBar.selectAll === "string" ? actionBar.selectAll : "Select All"), /* @__PURE__ */ React2.createElement(Space_default, null), (typeof actionBar === "boolean" || actionBar.clearAll) && /* @__PURE__ */ React2.createElement(Button, {
    "data-parent": label,
    domain: "primary",
    variant: "noFill",
    onClick: handleClearAll
  }, typeof actionBar === "object" && actionBar.clearAll && typeof actionBar.clearAll === "string" ? actionBar.clearAll : "Clear All")));
};
var List_default = withEscapeWatcher_default(List);

// src/components/shared/utils/getMultiselectLabel.ts
var getMultiselectLabel_default = ({options, value, placeholder}) => {
  if (!value || value.length === 0) {
    return placeholder;
  }
  return value.reduce((acc, cur) => {
    const valueIsOption = options.find((option) => option.id === cur);
    if (!valueIsOption) {
      return acc === "" ? placeholder : acc;
    }
    const name = valueIsOption.label;
    if (acc !== "") {
      return `${acc}, ${name}`;
    }
    return `${name}`;
  }, ``);
};

// src/components/shared/utils/getSelectLabel.ts
var getSelectLabel_default = ({options, value, placeholder}) => {
  const valueIsOption = options.find((option) => option.id === value[0]);
  if (typeof value === "undefined" || !valueIsOption) {
    return placeholder;
  }
  return valueIsOption.label;
};

// src/components/shared/Dropdown/Dropdown.tsx
var Dropdown2 = React3.forwardRef((props, forwardedRef) => {
  const {className, ...otherProps} = props;
  if (props.invalid) {
    console.warn(`prop 'invalid' has been deprecated in favor of passing 'status'="error"`);
    console.warn(`To be removed in @wedgekit/select@8.0.0`);
  }
  const internalRef = useRef2(null);
  const focusRef = useRef2(null);
  const dropdownRefs = mergeRefs([forwardedRef, internalRef]);
  const uuidRef = useRef2(uuid());
  const [showPopover, setShowPopover] = useState2(false);
  const getValueCount = () => {
    if (typeof props.value === "undefined") {
      return 0;
    }
    const validValues = props.options.map((option) => option.id);
    const values = Array.isArray(props.value) ? props.value : [props.value];
    return values.filter((val) => validValues.includes(val)).length;
  };
  const dropdownProps = {};
  if (props.labelHidden) {
    dropdownProps["aria-label"] = props.label;
  }
  const isInternal = (event) => !!focusRef.current && event.relatedTarget instanceof Node && focusRef.current.contains(event.relatedTarget);
  const handleDropdownFocus = (event) => {
    if (props.onFocus && !isInternal(event)) {
      props.onFocus(event);
    }
  };
  const handleDropdownBlur = (event) => {
    if (props.onBlur && event.currentTarget === event.target && !isInternal(event)) {
      props.onBlur(event);
    }
  };
  const handleListBlur = (event) => {
    if (props.onBlur) {
      props.onBlur(event);
    }
    if (event.relatedTarget !== internalRef.current) {
      setShowPopover(false);
    }
  };
  return /* @__PURE__ */ React3.createElement(FieldStatusWrapper, {
    className,
    disabled: props.disabled,
    fullLength: true,
    readOnly: props.readOnly
  }, !props.labelHidden && /* @__PURE__ */ React3.createElement(Row, {
    center: true
  }, /* @__PURE__ */ React3.createElement(Label_default, {
    disabled: props.disabled,
    htmlFor: uuidRef.current,
    required: props.required
  }, props.label), props.info && /* @__PURE__ */ React3.createElement(InfoButton, {
    info: props.info,
    tabIndex: props.tabIndex
  })), /* @__PURE__ */ React3.createElement("div", {
    ref: focusRef
  }, /* @__PURE__ */ React3.createElement(DropdownWrapper_default, {
    ...dropdownProps,
    labelHidden: props.labelHidden,
    disabled: props.disabled,
    invalid: props.invalid,
    popoverOpen: showPopover,
    readOnly: props.readOnly,
    ref: dropdownRefs,
    role: "button",
    status: props.status,
    tabIndex: props.disabled || showPopover ? primitives4.tabIndex.disabled : props.tabIndex || 0,
    onBlur: handleDropdownBlur,
    onFocus: handleDropdownFocus,
    onClick: () => setShowPopover(!showPopover),
    onKeyPress: (e) => {
      if (!showPopover) {
        return handleKeyEvent({
          "Enter|\\s": () => {
            setShowPopover(true);
          }
        })(e);
      }
      return null;
    }
  }, /* @__PURE__ */ React3.createElement(DropdownText_default, {
    htmlFor: uuidRef.current,
    disabled: props.disabled,
    required: props.required,
    isPlaceholder: !props.value || !props.value.length
  }, props.multiple ? getMultiselectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select option(s)",
    value: props.value
  }) : getSelectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select one",
    value: props.value
  })), props.multiple && !!props.value.length && getValueCount() > 0 && /* @__PURE__ */ React3.createElement(Badge_default, null, getValueCount()), /* @__PURE__ */ React3.createElement(Caret_default, null, /* @__PURE__ */ React3.createElement(Chevron, {
    color: props.disabled ? "N400" : "N600",
    direction: showPopover && !props.disabled ? "up" : "down"
  }))), showPopover && !props.disabled && /* @__PURE__ */ React3.createElement(List_default, {
    ...otherProps,
    id: uuidRef.current,
    toggleRef: internalRef,
    onBlur: handleListBlur,
    onEscape: () => {
      setShowPopover(false);
    },
    onSelect: props.multiple ? () => {
    } : (e) => {
      var _a;
      (_a = internalRef.current) == null ? void 0 : _a.focus();
      setShowPopover(false);
      if (props.onFocus) {
        props.onFocus(e);
      }
    },
    "data-cy": "multiselect-list"
  })));
});
var Dropdown_default = Dropdown2;

// src/components/shared/Native/Native.tsx
import React4, {useRef as useRef3, useState as useState3} from "react";
import {v4 as uuid2} from "uuid";
import {Chevron as Chevron2} from "@wedgekit/icons";
import InfoButton2 from "@wedgekit/info-button";
import {FieldStatusWrapper as FieldStatusWrapper2, Row as Row2} from "@wedgekit/primitives";

// src/components/shared/Native/styled/Wrapper.tsx
import styled15 from "styled-components";
var MobileSelectWrapper = styled15.div`
  position: relative;
  z-index: 0;
`;
var Wrapper_default = MobileSelectWrapper;

// src/components/shared/Native/styled/NativeDropdown.tsx
import styled16 from "styled-components";
var NativeDropdown_default = styled16(DropdownWrapper_default)`
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
`;

// src/components/shared/Native/styled/SelectRaw.tsx
import styled17 from "styled-components";
import {UpdatedInputMixin as UpdatedInputMixin2} from "@wedgekit/primitives";
var SelectRaw_default = styled17.select`
  ${UpdatedInputMixin2};
  appearance: none;
  color: transparent;
  background-color: transparent;
  box-shadow: none;
  width: 100%;
`;

// src/components/shared/Native/Native.tsx
var NativeSelect = React4.forwardRef((props, forwardedRef) => {
  const uuidRef = useRef3(uuid2());
  const [chevronDown, setChevronDown] = useState3(true);
  const dropdownProps = {};
  if (props.labelHidden) {
    dropdownProps["aria-label"] = props.label;
  }
  return /* @__PURE__ */ React4.createElement(FieldStatusWrapper2, {
    className: props.className,
    disabled: props.disabled,
    readOnly: props.readOnly
  }, !props.labelHidden && /* @__PURE__ */ React4.createElement(Row2, {
    center: true
  }, /* @__PURE__ */ React4.createElement(Label_default, {
    disabled: props.disabled,
    htmlFor: uuidRef.current,
    required: props.required
  }, props.label), props.info && /* @__PURE__ */ React4.createElement(InfoButton2, {
    info: props.info,
    tabIndex: props.tabIndex
  })), /* @__PURE__ */ React4.createElement(Wrapper_default, null, /* @__PURE__ */ React4.createElement(SelectRaw_default, {
    multiple: true,
    required: props.required,
    onBlur: (e) => {
      setChevronDown(true);
      if (props.onBlur) {
        props.onBlur(e);
      }
    },
    onChange: (e) => props.onChange([...e.target.selectedOptions].map((option) => option.value), e),
    onFocus: (e) => {
      setChevronDown(false);
      if (props.onFocus) {
        props.onFocus(e);
      }
    },
    ...dropdownProps
  }, props.options.map((option) => /* @__PURE__ */ React4.createElement("option", {
    value: option.id,
    selected: !!props.value.find((value) => value === option.id),
    disabled: option.disabled
  }, option.label))), /* @__PURE__ */ React4.createElement(NativeDropdown_default, {
    disabled: props.disabled,
    invalid: props.invalid,
    labelHidden: props.labelHidden,
    readOnly: props.readOnly,
    ref: forwardedRef,
    status: props.status
  }, /* @__PURE__ */ React4.createElement(DropdownText_default, {
    htmlFor: uuidRef.current,
    disabled: props.disabled,
    required: props.required
  }, props.multiple ? getMultiselectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select option(s)",
    value: props.value
  }) : getSelectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select one",
    value: props.value
  })), /* @__PURE__ */ React4.createElement(Caret_default, null, /* @__PURE__ */ React4.createElement(Chevron2, {
    color: props.disabled ? "N400" : "N600",
    direction: chevronDown ? "down" : "up"
  })))));
});
var Native_default = NativeSelect;

// src/components/Multiselect/Multiselect.tsx
var Multiselect = React5.forwardRef((props, ref) => /* @__PURE__ */ React5.createElement(React5.Fragment, null, browser.mobile ? /* @__PURE__ */ React5.createElement(Native_default, {
  ...props,
  multiple: true,
  ref
}) : /* @__PURE__ */ React5.createElement(Dropdown_default, {
  ...props,
  multiple: true,
  ref
})));
var Multiselect_default = Multiselect;

// src/components/Select/Select.tsx
import React6 from "react";
import {browser as browser2} from "@dmsi/core";
var Select = React6.forwardRef((props, ref) => {
  const options = props.delible ? [
    {
      id: typeof props.delible === "object" ? props.delible.id : "DELIBLE_OPTION_ID",
      label: typeof props.delible === "object" && props.delible.label || "---"
    },
    ...props.options
  ] : props.options;
  const value = [props.value];
  const onChange = (newValue, event) => {
    props.onChange(newValue[0] || "", event);
  };
  return /* @__PURE__ */ React6.createElement(React6.Fragment, null, browser2.mobile ? /* @__PURE__ */ React6.createElement(Native_default, {
    ...props,
    options,
    ref,
    value,
    onChange
  }) : /* @__PURE__ */ React6.createElement(Dropdown_default, {
    ...props,
    options,
    ref,
    value,
    onChange
  }));
});
var Select_default = Select;
export {
  Multiselect_default as Multiselect,
  Select_default as Select,
  ActionBar_default as StyledActionBar,
  Badge_default as StyledBadge,
  DropdownWrapper_default as StyledDropdown,
  DropdownText_default as StyledDropdownText,
  Filter_default as StyledFilter,
  Label_default as StyledLabel,
  OptionList_default as StyledOptionList
};
//# sourceMappingURL=data:application/json;base64,
