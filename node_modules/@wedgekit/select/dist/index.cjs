var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.ts
__markAsModule(exports);
__export(exports, {
  Multiselect: () => Multiselect_default,
  Select: () => Select_default,
  StyledActionBar: () => ActionBar_default,
  StyledBadge: () => Badge_default,
  StyledDropdown: () => DropdownWrapper_default,
  StyledDropdownText: () => DropdownText_default,
  StyledFilter: () => Filter_default,
  StyledLabel: () => Label_default,
  StyledOptionList: () => OptionList_default
});

// src/components/Multiselect/Multiselect.tsx
var import_react5 = __toModule(require("react"));
var import_core = __toModule(require("@dmsi/core"));

// src/components/shared/Dropdown/Dropdown.tsx
var import_react3 = __toModule(require("react"));
var import_react_merge_refs = __toModule(require("react-merge-refs"));
var import_uuid = __toModule(require("uuid"));
var import_icons = __toModule(require("@wedgekit/icons"));
var import_info_button = __toModule(require("@wedgekit/info-button"));
var import_primitives11 = __toModule(require("@wedgekit/primitives"));
var import_utils2 = __toModule(require("@wedgekit/utils"));

// src/components/shared/Dropdown/styled/Badge.tsx
var import_styled_components = __toModule(require("styled-components"));
var import_color = __toModule(require("@wedgekit/color"));
var import_primitives = __toModule(require("@wedgekit/primitives"));
var Badge = import_styled_components.default.div`
  grid-column: 2/3;
  margin-right: ${(0, import_primitives.getBasePx)(3)};
  height: ${(0, import_primitives.getBasePx)(6)};
  border-radius: ${import_primitives.default.base * 3}px;
  text-align: center;
  background-color: ${import_color.default.B200};
  color: ${import_color.default.B600};
  font-family: ${import_primitives.default.fontFamily};
  font-weight: ${import_primitives.default.fontWeight.link};
  line-height: 1.5rem;
  font-size: ${import_primitives.default.fontSize.input}px;
  ${({children}) => {
  const charCount = (children == null ? void 0 : children.toString().length) || 0;
  return `width: ${import_primitives.default.base * (4 + 2 * charCount)}px;`;
}};
`;
var Badge_default = Badge;

// src/components/shared/Dropdown/styled/Caret.tsx
var import_styled_components2 = __toModule(require("styled-components"));
var import_primitives2 = __toModule(require("@wedgekit/primitives"));
var Caret = import_styled_components2.default.div`
  grid-column: 3/4;
  height: ${(0, import_primitives2.getBasePx)(4)};
  width: ${(0, import_primitives2.getBasePx)(4)};
`;
var Caret_default = Caret;

// src/components/shared/Dropdown/styled/DropdownWrapper.tsx
var import_styled_components3 = __toModule(require("styled-components"));
var import_color2 = __toModule(require("@wedgekit/color"));
var import_primitives3 = __toModule(require("@wedgekit/primitives"));
var Dropdown = import_styled_components3.default.div`
  cursor: pointer;
  ${import_primitives3.UpdatedInputMixin}
  align-items: center;
  display: inline-grid;
  grid-template-columns: minmax(0, 1fr) min-content min-content;
  padding: 0 ${(0, import_primitives3.getBasePx)(3)};
  width: 100%;
  border: ${({disabled, popoverOpen}) => !disabled && popoverOpen && `${import_primitives3.default.border.width.standard}px solid ${import_color2.default.B500}`};
  box-shadow: ${({disabled, popoverOpen}) => !disabled && popoverOpen && `inset 0 0 0 .5px ${import_color2.default.B500}`};
  &:focus {
  }
`;
var DropdownWrapper_default = Dropdown;

// src/components/shared/Dropdown/styled/DropdownText.ts
var import_styled_components4 = __toModule(require("styled-components"));
var import_primitives4 = __toModule(require("@wedgekit/primitives"));
var import_color3 = __toModule(require("@wedgekit/color"));
var DropdownText = (0, import_styled_components4.default)(import_primitives4.Text)`
  color: ${({disabled, isPlaceholder}) => (disabled || isPlaceholder) && import_color3.default.N400};
  grid-column: 1/2;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
`;
var DropdownText_default = DropdownText;

// src/components/shared/Dropdown/styled/Label.tsx
var import_styled_components5 = __toModule(require("styled-components"));
var import_primitives5 = __toModule(require("@wedgekit/primitives"));
var Label = (0, import_styled_components5.default)(import_primitives5.Label)``;
var Label_default = Label;

// src/components/shared/List/List.tsx
var import_react2 = __toModule(require("react"));
var import_button = __toModule(require("@wedgekit/button"));
var import_hooks = __toModule(require("@wedgekit/hooks"));

// src/components/shared/List/utils/getNewValue.ts
var getNewValue = ({
  multiple = false,
  options,
  filteredOptions = options,
  currentIdx,
  previousIdx,
  shiftDown,
  value
}) => {
  if (!multiple) {
    return [filteredOptions[currentIdx].id];
  }
  const [startChangeIdx, endChangeIdx] = [currentIdx, previousIdx].sort();
  return options.reduce((newValue, option) => {
    const currentlySelected = value.includes(option.id);
    const optionIdx = filteredOptions.findIndex((filteredOption) => filteredOption.id === option.id);
    if (typeof optionIdx !== "number") {
      if (currentlySelected) {
        return newValue.concat(option.id);
      }
      return newValue;
    }
    if (shiftDown) {
      const addOption2 = startChangeIdx <= optionIdx && optionIdx <= endChangeIdx;
      if (currentlySelected || addOption2) {
        return newValue.concat(option.id);
      }
    }
    const toggleOption = currentIdx === optionIdx;
    const addOption = currentlySelected || toggleOption;
    const removeOption = currentlySelected && toggleOption;
    if (addOption && !removeOption) {
      return newValue.concat(option.id);
    }
    return newValue;
  }, []);
};
var getNewValue_default = getNewValue;

// src/components/shared/List/utils/getNewIndex.ts
var getNewIndex_default = (startIdx, move, listLength) => {
  const a = startIdx + move;
  const n = listLength;
  return (a % n + n) % n;
};

// src/components/shared/List/utils/withEscapeWatcher.tsx
var import_react = __toModule(require("react"));
var withEscapeWatcher = (Component) => (props) => {
  (0, import_react.useEffect)(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        e.stopPropagation();
        if (props.onEscape) {
          props.onEscape(e);
        }
        if (props.toggleRef && props.toggleRef.current) {
          props.toggleRef.current.focus();
        }
      }
    };
    window.addEventListener("keydown", handleKeyDown, true);
    return () => window.removeEventListener("keydown", handleKeyDown, true);
  }, []);
  return /* @__PURE__ */ import_react.default.createElement(Component, __spreadValues({}, props));
};
var withEscapeWatcher_default = withEscapeWatcher;

// src/components/shared/List/styled/ActionBar.tsx
var import_styled_components6 = __toModule(require("styled-components"));
var import_primitives6 = __toModule(require("@wedgekit/primitives"));
var ActionBar = import_styled_components6.default.div`
  position: relative;
  display: flex;
  justify-content: center;
  button {
    margin: ${(0, import_primitives6.getBasePx)(2)};
  }
  box-shadow: 0 -2px 4px 0 rgba(0, 0, 0, 0.1);
`;
var ActionBar_default = ActionBar;

// src/components/shared/List/styled/Filter.tsx
var import_styled_components7 = __toModule(require("styled-components"));
var import_input = __toModule(require("@wedgekit/input"));
var import_primitives7 = __toModule(require("@wedgekit/primitives"));
var Filter = (0, import_styled_components7.default)(import_input.default)`
  margin-top: 0px;
  margin-bottom: ${(0, import_primitives7.getBasePx)(3)};
`;
var Filter_default = Filter;

// src/components/shared/List/styled/MultiselectOption.tsx
var import_styled_components8 = __toModule(require("styled-components"));
var import_checkbox = __toModule(require("@wedgekit/checkbox"));
var import_color4 = __toModule(require("@wedgekit/color"));
var getBackgroundColor = (active, value) => {
  if (value) {
    if (active) {
      return import_color4.default.B100;
    }
    return import_color4.default.B200;
  }
  if (active) {
    return import_color4.default.N100;
  }
  return import_color4.default.N050;
};
var MultiselectOption = (0, import_styled_components8.default)(import_checkbox.default)`
  box-sizing: border-box;
  margin-bottom: 4px;
  padding: 0 4px;
  width: 100%;

  &::first-child {
    margin-top: 12px;
  }

  &:last-child {
    margin-bottom: 0px;
  }

  ${import_checkbox.StyledLabel} {
    background: ${({active, value}) => getBackgroundColor(active, value)};
    font-weight: 400;
    user-select: none;
    margin: 0 -16px;
    border-radius: 0;
    padding: 6px 12px;

    &:hover {
      background: ${({value}) => value ? import_color4.default.B100 : import_color4.default.N100};
      label {
        color: ${import_color4.default.N600};
      }
    }
  }
`;
var MultiselectOption_default = MultiselectOption;

// src/components/shared/List/styled/OptionList.tsx
var import_styled_components9 = __toModule(require("styled-components"));
var OptionList_default = import_styled_components9.default.div`
  &:focus {
    outline: none;
  }
`;

// src/components/shared/List/styled/OptionText.tsx
var import_styled_components10 = __toModule(require("styled-components"));
var import_primitives8 = __toModule(require("@wedgekit/primitives"));
var OptionText = (0, import_styled_components10.default)(import_primitives8.Text)`
  pointer-events: none;
  margin: 8px 0px;
  line-height: 1.5rem;

  &:focus {
    outline: none;
  }
`;
var OptionText_default = OptionText;

// src/components/shared/List/styled/OptionsWrapper.tsx
var import_styled_components11 = __toModule(require("styled-components"));
var import_input2 = __toModule(require("@wedgekit/input"));
var import_primitives9 = __toModule(require("@wedgekit/primitives"));
var OptionWrapper = import_styled_components11.default.div`
  overflow-y: auto;
  max-height: 30vh;
  width: ${({toggleRef}) => toggleRef.current && `${toggleRef.current.clientWidth - import_primitives9.default.base * 6}px`};
  padding: ${(0, import_primitives9.getBasePx)(3)};

  ${import_input2.InputWrapper} {
    margin: 0px;
  }
`;
var OptionsWrapper_default = OptionWrapper;

// src/components/shared/List/styled/SelectOption.tsx
var import_styled_components12 = __toModule(require("styled-components"));
var import_color5 = __toModule(require("@wedgekit/color"));
var import_primitives10 = __toModule(require("@wedgekit/primitives"));
var getBackgroundColor2 = (value, active) => {
  if (value) {
    if (active) {
      return import_color5.default.B100;
    }
    return import_color5.default.B200;
  }
  if (active) {
    return import_color5.default.N100;
  }
  return import_color5.default.N050;
};
var SelectOption = import_styled_components12.default.div`
  align-content: center;
  background: ${({value, active}) => getBackgroundColor2(value, active)};
  cursor: pointer;
  display: flex;
  margin: 0 -${(0, import_primitives10.getBasePx)(3)} ${(0, import_primitives10.getBasePx)(1)} -${(0, import_primitives10.getBasePx)(3)};
  padding: 0 ${(0, import_primitives10.getBasePx)(3)};
  ${import_primitives10.CursorMixin};
  transition: background 0.2s ease-out;

  & div {
    flex: 1;
  }

  &:focus {
    outline: none;
  }

  label {
    font-weight: normal;
    &:focus {
      color: ${import_color5.default.N600};
    }
  }

  &:hover {
    background: ${({value}) => value ? import_color5.default.B100 : import_color5.default.N100};
    label {
      color: ${import_color5.default.N600};
    }
  }
`;
var SelectOption_default = SelectOption;

// src/components/shared/List/styled/Space.tsx
var import_styled_components13 = __toModule(require("styled-components"));
var Space = import_styled_components13.default.div`
  flex: 1;
`;
var Space_default = Space;

// src/components/shared/List/styled/StyledPopover.tsx
var import_styled_components14 = __toModule(require("styled-components"));
var import_color6 = __toModule(require("@wedgekit/color"));
var import_popover = __toModule(require("@wedgekit/popover"));
var StyledPopover_default = (0, import_styled_components14.default)(import_popover.default)`
  background: ${import_color6.default.N050};
`;

// src/components/shared/List/List.tsx
var List = (props) => {
  const {
    actionBar,
    filter: displayFilter,
    filterPlaceholder,
    label,
    multiple,
    options,
    toggleRef,
    value,
    onBlur,
    onChange,
    onEscape,
    onSelect
  } = props;
  const activeOptionRef = (0, import_react2.useRef)(null);
  const internalFocusRef = (0, import_react2.useRef)(null);
  const checkboxListRef = (0, import_react2.useRef)(null);
  const filterRef = (0, import_react2.useRef)(null);
  const [filter, setFilter] = (0, import_react2.useState)("");
  const [filteredOptions, setFilteredOptions] = (0, import_react2.useState)(options.filter((option) => option.label.toLowerCase().includes(filter.toLowerCase())));
  const [activeOptionIdx, setActiveOptionIdx] = (0, import_react2.useState)(!!value === !![] ? 0 : filteredOptions.findIndex((option) => value.includes(option.id)));
  const [allSelected, setAllSelected] = (0, import_react2.useState)(value === filteredOptions.map((option) => option.id));
  (0, import_react2.useEffect)(() => {
    var _a;
    (_a = activeOptionRef.current) == null ? void 0 : _a.scrollIntoView({behavior: "smooth", block: "nearest"});
  }, [activeOptionIdx]);
  (0, import_react2.useEffect)(() => {
    if (displayFilter) {
      filterRef.current.focus();
    } else {
      checkboxListRef.current.focus();
    }
  }, []);
  (0, import_hooks.useContainerEvent)(internalFocusRef, {
    scroll: (e, inside) => {
      if (!inside && onEscape) {
        onEscape(e);
      }
    }
  });
  const handleFilterChange = (newFilter) => {
    setFilter(newFilter);
    setFilteredOptions(options.filter((option) => option.label.toLowerCase().includes(newFilter.toLowerCase())));
  };
  const handleClick = (event) => {
    const option = event.target;
    const currentIdx = parseInt(option.getAttribute("data-idx"), 10);
    const newValue = getNewValue_default({
      multiple,
      options,
      filteredOptions,
      currentIdx,
      previousIdx: activeOptionIdx,
      shiftDown: event.shiftKey,
      value
    });
    onChange(newValue, event);
    if (onSelect) {
      onSelect(event);
    }
    setActiveOptionIdx(currentIdx);
  };
  const handleKeyDown = (event) => {
    switch (event.key) {
      case "ArrowDown":
        event.preventDefault();
        setActiveOptionIdx(getNewIndex_default(activeOptionIdx, 1, filteredOptions.length));
        break;
      case "ArrowUp":
        event.preventDefault();
        setActiveOptionIdx(getNewIndex_default(activeOptionIdx, -1, filteredOptions.length));
        break;
      case "End":
        event.preventDefault();
        setActiveOptionIdx(filteredOptions.length - 1);
        break;
      case "Home":
        event.preventDefault();
        setActiveOptionIdx(0);
        break;
      case " ":
      case "SpaceBar":
        event.preventDefault();
        activeOptionRef.current.click();
        break;
      default:
    }
  };
  const handleClearAll = (event) => {
    setAllSelected(false);
    onChange([], event);
  };
  const handleSelectAll = (event) => {
    if (allSelected) {
      handleClearAll(event);
    } else {
      const allValues = filteredOptions.reduce((acc, cur) => {
        acc.push(cur.id);
        return acc;
      }, []);
      setAllSelected(true);
      onChange(allValues, event);
    }
  };
  const handleBlur = (event) => {
    const internalFocus = !!internalFocusRef.current && event.relatedTarget instanceof Node && internalFocusRef.current.contains(event.relatedTarget);
    if (!internalFocus && onBlur) {
      onBlur(event);
    }
  };
  return /* @__PURE__ */ import_react2.default.createElement(StyledPopover_default, {
    node: toggleRef.current,
    ref: internalFocusRef,
    onExit: onEscape,
    enabled: false
  }, /* @__PURE__ */ import_react2.default.createElement(OptionsWrapper_default, {
    "data-parent": label,
    toggleRef,
    tabIndex: -1,
    onBlur: handleBlur
  }, displayFilter && /* @__PURE__ */ import_react2.default.createElement(Filter_default, {
    "data-parent": label,
    fullWidth: true,
    label: `Filter ${label} select`,
    labelHidden: true,
    placeholder: filterPlaceholder || "Search",
    ref: filterRef,
    value: filter,
    onChange: (newFilter) => {
      handleFilterChange(newFilter);
    },
    onKeyDown: handleKeyDown,
    status: "default"
  }), /* @__PURE__ */ import_react2.default.createElement(OptionList_default, {
    "aria-label": label,
    "data-parent": label,
    id: `${label}-listbox`,
    role: "listbox",
    ref: checkboxListRef,
    tabIndex: displayFilter ? -1 : 0,
    onKeyDown: handleKeyDown
  }, filteredOptions.map((option, idx) => multiple ? /* @__PURE__ */ import_react2.default.createElement(MultiselectOption_default, {
    active: activeOptionIdx === idx,
    "data-idx": idx,
    "data-parent": label,
    disabled: option.disabled,
    id: `${label}-${option.id}`,
    key: `option-${option.id}`,
    label: option.label,
    name: option.id,
    ref: idx === activeOptionIdx ? activeOptionRef : void 0,
    role: "option",
    tabIndex: -1,
    value: multiple ? value.includes(option.id) : value[0] === option.id,
    onChange: () => {
    },
    onClick: handleClick
  }) : /* @__PURE__ */ import_react2.default.createElement(SelectOption_default, {
    active: activeOptionIdx === idx,
    "aria-label": option.label,
    "aria-selected": value[0] === option.id,
    "data-parent": label,
    "data-idx": idx,
    disabled: option.disabled,
    id: `${option.id}`,
    key: `option-${option.id}`,
    ref: idx === activeOptionIdx ? activeOptionRef : void 0,
    role: "option",
    tabIndex: -1,
    value: value[0] === option.id,
    onClick: handleClick
  }, /* @__PURE__ */ import_react2.default.createElement(OptionText_default, {
    "data-parent": label,
    tabIndex: -1
  }, option.label))))), multiple && !!actionBar && /* @__PURE__ */ import_react2.default.createElement(ActionBar_default, {
    "data-parent": label,
    toggleRef,
    onBlur: handleBlur
  }, (typeof actionBar === "boolean" || actionBar.selectAll) && /* @__PURE__ */ import_react2.default.createElement(import_button.default, {
    "data-parent": label,
    domain: "secondary",
    variant: "noFill",
    onClick: handleSelectAll
  }, typeof actionBar === "object" && actionBar.selectAll && typeof actionBar.selectAll === "string" ? actionBar.selectAll : "Select All"), /* @__PURE__ */ import_react2.default.createElement(Space_default, null), (typeof actionBar === "boolean" || actionBar.clearAll) && /* @__PURE__ */ import_react2.default.createElement(import_button.default, {
    "data-parent": label,
    domain: "primary",
    variant: "noFill",
    onClick: handleClearAll
  }, typeof actionBar === "object" && actionBar.clearAll && typeof actionBar.clearAll === "string" ? actionBar.clearAll : "Clear All")));
};
var List_default = withEscapeWatcher_default(List);

// src/components/shared/utils/getMultiselectLabel.ts
var getMultiselectLabel_default = ({options, value, placeholder}) => {
  if (!value || value.length === 0) {
    return placeholder;
  }
  return value.reduce((acc, cur) => {
    const valueIsOption = options.find((option) => option.id === cur);
    if (!valueIsOption) {
      return acc === "" ? placeholder : acc;
    }
    const name = valueIsOption.label;
    if (acc !== "") {
      return `${acc}, ${name}`;
    }
    return `${name}`;
  }, ``);
};

// src/components/shared/utils/getSelectLabel.ts
var getSelectLabel_default = ({options, value, placeholder}) => {
  const valueIsOption = options.find((option) => option.id === value[0]);
  if (typeof value === "undefined" || !valueIsOption) {
    return placeholder;
  }
  return valueIsOption.label;
};

// src/components/shared/Dropdown/Dropdown.tsx
var Dropdown2 = import_react3.default.forwardRef((props, forwardedRef) => {
  const _a = props, {className} = _a, otherProps = __objRest(_a, ["className"]);
  if (props.invalid) {
    console.warn(`prop 'invalid' has been deprecated in favor of passing 'status'="error"`);
    console.warn(`To be removed in @wedgekit/select@8.0.0`);
  }
  const internalRef = (0, import_react3.useRef)(null);
  const focusRef = (0, import_react3.useRef)(null);
  const dropdownRefs = (0, import_react_merge_refs.default)([forwardedRef, internalRef]);
  const uuidRef = (0, import_react3.useRef)((0, import_uuid.v4)());
  const [showPopover, setShowPopover] = (0, import_react3.useState)(false);
  const getValueCount = () => {
    if (typeof props.value === "undefined") {
      return 0;
    }
    const validValues = props.options.map((option) => option.id);
    const values = Array.isArray(props.value) ? props.value : [props.value];
    return values.filter((val) => validValues.includes(val)).length;
  };
  const dropdownProps = {};
  if (props.labelHidden) {
    dropdownProps["aria-label"] = props.label;
  }
  const isInternal = (event) => !!focusRef.current && event.relatedTarget instanceof Node && focusRef.current.contains(event.relatedTarget);
  const handleDropdownFocus = (event) => {
    if (props.onFocus && !isInternal(event)) {
      props.onFocus(event);
    }
  };
  const handleDropdownBlur = (event) => {
    if (props.onBlur && event.currentTarget === event.target && !isInternal(event)) {
      props.onBlur(event);
    }
  };
  const handleListBlur = (event) => {
    if (props.onBlur) {
      props.onBlur(event);
    }
    if (event.relatedTarget !== internalRef.current) {
      setShowPopover(false);
    }
  };
  return /* @__PURE__ */ import_react3.default.createElement(import_primitives11.FieldStatusWrapper, {
    className,
    disabled: props.disabled,
    fullLength: true,
    readOnly: props.readOnly
  }, !props.labelHidden && /* @__PURE__ */ import_react3.default.createElement(import_primitives11.Row, {
    center: true
  }, /* @__PURE__ */ import_react3.default.createElement(Label_default, {
    disabled: props.disabled,
    htmlFor: uuidRef.current,
    required: props.required
  }, props.label), props.info && /* @__PURE__ */ import_react3.default.createElement(import_info_button.default, {
    info: props.info,
    tabIndex: props.tabIndex
  })), /* @__PURE__ */ import_react3.default.createElement("div", {
    ref: focusRef
  }, /* @__PURE__ */ import_react3.default.createElement(DropdownWrapper_default, __spreadProps(__spreadValues({}, dropdownProps), {
    labelHidden: props.labelHidden,
    disabled: props.disabled,
    invalid: props.invalid,
    popoverOpen: showPopover,
    readOnly: props.readOnly,
    ref: dropdownRefs,
    role: "button",
    status: props.status,
    tabIndex: props.disabled || showPopover ? import_primitives11.default.tabIndex.disabled : props.tabIndex || 0,
    onBlur: handleDropdownBlur,
    onFocus: handleDropdownFocus,
    onClick: () => setShowPopover(!showPopover),
    onKeyPress: (e) => {
      if (!showPopover) {
        return (0, import_utils2.handleKeyEvent)({
          "Enter|\\s": () => {
            setShowPopover(true);
          }
        })(e);
      }
      return null;
    }
  }), /* @__PURE__ */ import_react3.default.createElement(DropdownText_default, {
    htmlFor: uuidRef.current,
    disabled: props.disabled,
    required: props.required,
    isPlaceholder: !props.value || !props.value.length
  }, props.multiple ? getMultiselectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select option(s)",
    value: props.value
  }) : getSelectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select one",
    value: props.value
  })), props.multiple && !!props.value.length && getValueCount() > 0 && /* @__PURE__ */ import_react3.default.createElement(Badge_default, null, getValueCount()), /* @__PURE__ */ import_react3.default.createElement(Caret_default, null, /* @__PURE__ */ import_react3.default.createElement(import_icons.Chevron, {
    color: props.disabled ? "N400" : "N600",
    direction: showPopover && !props.disabled ? "up" : "down"
  }))), showPopover && !props.disabled && /* @__PURE__ */ import_react3.default.createElement(List_default, __spreadProps(__spreadValues({}, otherProps), {
    id: uuidRef.current,
    toggleRef: internalRef,
    onBlur: handleListBlur,
    onEscape: () => {
      setShowPopover(false);
    },
    onSelect: props.multiple ? () => {
    } : (e) => {
      var _a2;
      (_a2 = internalRef.current) == null ? void 0 : _a2.focus();
      setShowPopover(false);
      if (props.onFocus) {
        props.onFocus(e);
      }
    },
    "data-cy": "multiselect-list"
  }))));
});
var Dropdown_default = Dropdown2;

// src/components/shared/Native/Native.tsx
var import_react4 = __toModule(require("react"));
var import_uuid2 = __toModule(require("uuid"));
var import_icons2 = __toModule(require("@wedgekit/icons"));
var import_info_button2 = __toModule(require("@wedgekit/info-button"));
var import_primitives13 = __toModule(require("@wedgekit/primitives"));

// src/components/shared/Native/styled/Wrapper.tsx
var import_styled_components15 = __toModule(require("styled-components"));
var MobileSelectWrapper = import_styled_components15.default.div`
  position: relative;
  z-index: 0;
`;
var Wrapper_default = MobileSelectWrapper;

// src/components/shared/Native/styled/NativeDropdown.tsx
var import_styled_components16 = __toModule(require("styled-components"));
var NativeDropdown_default = (0, import_styled_components16.default)(DropdownWrapper_default)`
  position: absolute;
  z-index: -1;
  top: 0;
  left: 0;
`;

// src/components/shared/Native/styled/SelectRaw.tsx
var import_styled_components17 = __toModule(require("styled-components"));
var import_primitives12 = __toModule(require("@wedgekit/primitives"));
var SelectRaw_default = import_styled_components17.default.select`
  ${import_primitives12.UpdatedInputMixin};
  appearance: none;
  color: transparent;
  background-color: transparent;
  box-shadow: none;
  width: 100%;
`;

// src/components/shared/Native/Native.tsx
var NativeSelect = import_react4.default.forwardRef((props, forwardedRef) => {
  const uuidRef = (0, import_react4.useRef)((0, import_uuid2.v4)());
  const [chevronDown, setChevronDown] = (0, import_react4.useState)(true);
  const dropdownProps = {};
  if (props.labelHidden) {
    dropdownProps["aria-label"] = props.label;
  }
  return /* @__PURE__ */ import_react4.default.createElement(import_primitives13.FieldStatusWrapper, {
    className: props.className,
    disabled: props.disabled,
    readOnly: props.readOnly
  }, !props.labelHidden && /* @__PURE__ */ import_react4.default.createElement(import_primitives13.Row, {
    center: true
  }, /* @__PURE__ */ import_react4.default.createElement(Label_default, {
    disabled: props.disabled,
    htmlFor: uuidRef.current,
    required: props.required
  }, props.label), props.info && /* @__PURE__ */ import_react4.default.createElement(import_info_button2.default, {
    info: props.info,
    tabIndex: props.tabIndex
  })), /* @__PURE__ */ import_react4.default.createElement(Wrapper_default, null, /* @__PURE__ */ import_react4.default.createElement(SelectRaw_default, __spreadValues({
    multiple: true,
    required: props.required,
    onBlur: (e) => {
      setChevronDown(true);
      if (props.onBlur) {
        props.onBlur(e);
      }
    },
    onChange: (e) => props.onChange([...e.target.selectedOptions].map((option) => option.value), e),
    onFocus: (e) => {
      setChevronDown(false);
      if (props.onFocus) {
        props.onFocus(e);
      }
    }
  }, dropdownProps), props.options.map((option) => /* @__PURE__ */ import_react4.default.createElement("option", {
    value: option.id,
    selected: !!props.value.find((value) => value === option.id),
    disabled: option.disabled
  }, option.label))), /* @__PURE__ */ import_react4.default.createElement(NativeDropdown_default, {
    disabled: props.disabled,
    invalid: props.invalid,
    labelHidden: props.labelHidden,
    readOnly: props.readOnly,
    ref: forwardedRef,
    status: props.status
  }, /* @__PURE__ */ import_react4.default.createElement(DropdownText_default, {
    htmlFor: uuidRef.current,
    disabled: props.disabled,
    required: props.required
  }, props.multiple ? getMultiselectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select option(s)",
    value: props.value
  }) : getSelectLabel_default({
    options: props.options,
    placeholder: props.placeholder || "Select one",
    value: props.value
  })), /* @__PURE__ */ import_react4.default.createElement(Caret_default, null, /* @__PURE__ */ import_react4.default.createElement(import_icons2.Chevron, {
    color: props.disabled ? "N400" : "N600",
    direction: chevronDown ? "down" : "up"
  })))));
});
var Native_default = NativeSelect;

// src/components/Multiselect/Multiselect.tsx
var Multiselect = import_react5.default.forwardRef((props, ref) => /* @__PURE__ */ import_react5.default.createElement(import_react5.default.Fragment, null, import_core.browser.mobile ? /* @__PURE__ */ import_react5.default.createElement(Native_default, __spreadProps(__spreadValues({}, props), {
  multiple: true,
  ref
})) : /* @__PURE__ */ import_react5.default.createElement(Dropdown_default, __spreadProps(__spreadValues({}, props), {
  multiple: true,
  ref
}))));
var Multiselect_default = Multiselect;

// src/components/Select/Select.tsx
var import_react6 = __toModule(require("react"));
var import_core2 = __toModule(require("@dmsi/core"));
var Select = import_react6.default.forwardRef((props, ref) => {
  const options = props.delible ? [
    {
      id: typeof props.delible === "object" ? props.delible.id : "DELIBLE_OPTION_ID",
      label: typeof props.delible === "object" && props.delible.label || "---"
    },
    ...props.options
  ] : props.options;
  const value = [props.value];
  const onChange = (newValue, event) => {
    props.onChange(newValue[0] || "", event);
  };
  return /* @__PURE__ */ import_react6.default.createElement(import_react6.default.Fragment, null, import_core2.browser.mobile ? /* @__PURE__ */ import_react6.default.createElement(Native_default, __spreadProps(__spreadValues({}, props), {
    options,
    ref,
    value,
    onChange
  })) : /* @__PURE__ */ import_react6.default.createElement(Dropdown_default, __spreadProps(__spreadValues({}, props), {
    options,
    ref,
    value,
    onChange
  })));
});
var Select_default = Select;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9jb21wb25lbnRzL011bHRpc2VsZWN0L011bHRpc2VsZWN0LnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvRHJvcGRvd24vRHJvcGRvd24udHN4IiwgIi4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9Ecm9wZG93bi9zdHlsZWQvQmFkZ2UudHN4IiwgIi4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9Ecm9wZG93bi9zdHlsZWQvQ2FyZXQudHN4IiwgIi4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9Ecm9wZG93bi9zdHlsZWQvRHJvcGRvd25XcmFwcGVyLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvRHJvcGRvd24vc3R5bGVkL0Ryb3Bkb3duVGV4dC50cyIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvRHJvcGRvd24vc3R5bGVkL0xhYmVsLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC9MaXN0LnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC91dGlscy9nZXROZXdWYWx1ZS50cyIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC91dGlscy9nZXROZXdJbmRleC50cyIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC91dGlscy93aXRoRXNjYXBlV2F0Y2hlci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL0FjdGlvbkJhci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL0ZpbHRlci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL011bHRpc2VsZWN0T3B0aW9uLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC9zdHlsZWQvT3B0aW9uTGlzdC50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL09wdGlvblRleHQudHN4IiwgIi4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9MaXN0L3N0eWxlZC9PcHRpb25zV3JhcHBlci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL1NlbGVjdE9wdGlvbi50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL0xpc3Qvc3R5bGVkL1NwYWNlLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTGlzdC9zdHlsZWQvU3R5bGVkUG9wb3Zlci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL3V0aWxzL2dldE11bHRpc2VsZWN0TGFiZWwudHMiLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL3V0aWxzL2dldFNlbGVjdExhYmVsLnRzIiwgIi4uL3NyYy9jb21wb25lbnRzL3NoYXJlZC9OYXRpdmUvTmF0aXZlLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTmF0aXZlL3N0eWxlZC9XcmFwcGVyLnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9zaGFyZWQvTmF0aXZlL3N0eWxlZC9OYXRpdmVEcm9wZG93bi50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvc2hhcmVkL05hdGl2ZS9zdHlsZWQvU2VsZWN0UmF3LnRzeCIsICIuLi9zcmMvY29tcG9uZW50cy9TZWxlY3QvU2VsZWN0LnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IHtcbiAgTXVsdGlzZWxlY3QsXG4gIE9wdGlvblByb3BzLFxuICBTZWxlY3QsXG4gIFN0eWxlZEFjdGlvbkJhcixcbiAgU3R5bGVkQmFkZ2UsXG4gIFN0eWxlZERyb3Bkb3duLFxuICBTdHlsZWREcm9wZG93blRleHQsXG4gIFN0eWxlZEZpbHRlcixcbiAgU3R5bGVkTGFiZWwsXG4gIFN0eWxlZE9wdGlvbkxpc3QsXG59IGZyb20gJy4vY29tcG9uZW50cyc7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ0BkbXNpL2NvcmUnO1xuXG5pbXBvcnQgeyBEcm9wZG93biwgTmF0aXZlIH0gZnJvbSAnLi4vc2hhcmVkJztcbmltcG9ydCB7IERyb3Bkb3duUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IE11bHRpc2VsZWN0ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHM6IERyb3Bkb3duUHJvcHMsIHJlZj86IFJlYWN0LlJlZjxIVE1MRGl2RWxlbWVudD4pID0+IChcbiAgPD5cbiAgICB7YnJvd3Nlci5tb2JpbGUgPyAoXG4gICAgICA8TmF0aXZlIHsuLi5wcm9wc30gbXVsdGlwbGUgcmVmPXtyZWZ9IC8+XG4gICAgKSA6IChcbiAgICAgIDxEcm9wZG93biB7Li4ucHJvcHN9IG11bHRpcGxlIHJlZj17cmVmfSAvPlxuICAgICl9XG4gIDwvPlxuKSk7XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpc2VsZWN0O1xuIiwgImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZVN0YXRlLCBLZXlib2FyZEV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1lcmdlUmVmcyBmcm9tICdyZWFjdC1tZXJnZS1yZWZzJztcbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcblxuaW1wb3J0IHsgT3B0aW9uUHJvcHMgfSBmcm9tICdAd2VkZ2VraXQvY2hlY2tib3gtbGlzdCc7XG5cbmltcG9ydCB7IENoZXZyb24gfSBmcm9tICdAd2VkZ2VraXQvaWNvbnMnO1xuaW1wb3J0IEluZm9CdXR0b24gZnJvbSAnQHdlZGdla2l0L2luZm8tYnV0dG9uJztcbmltcG9ydCBwcmltaXRpdmVzLCB7IEZpZWxkU3RhdHVzV3JhcHBlciwgUm93IH0gZnJvbSAnQHdlZGdla2l0L3ByaW1pdGl2ZXMnO1xuaW1wb3J0IHsgaGFuZGxlS2V5RXZlbnQgfSBmcm9tICdAd2VkZ2VraXQvdXRpbHMnO1xuXG5pbXBvcnQgeyBEcm9wZG93bldyYXBwZXIsIERyb3Bkb3duVGV4dCwgQ2FyZXQsIExhYmVsLCBCYWRnZSB9IGZyb20gJy4vc3R5bGVkJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7IERyb3Bkb3duUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRNdWx0aXNlbGVjdExhYmVsLCBnZXRTZWxlY3RMYWJlbCB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgRHJvcGRvd24gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBEcm9wZG93blByb3BzPigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgLi4ub3RoZXJQcm9wcyB9ID0gcHJvcHM7XG5cbiAgaWYgKHByb3BzLmludmFsaWQpIHtcbiAgICBjb25zb2xlLndhcm4oYHByb3AgJ2ludmFsaWQnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgcGFzc2luZyAnc3RhdHVzJz1cImVycm9yXCJgKTtcbiAgICBjb25zb2xlLndhcm4oYFRvIGJlIHJlbW92ZWQgaW4gQHdlZGdla2l0L3NlbGVjdEA4LjAuMGApO1xuICB9XG5cbiAgY29uc3QgaW50ZXJuYWxSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBmb2N1c1JlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGRyb3Bkb3duUmVmcyA9IG1lcmdlUmVmcyhbZm9yd2FyZGVkUmVmLCBpbnRlcm5hbFJlZl0pO1xuICBjb25zdCB1dWlkUmVmID0gdXNlUmVmKHV1aWQoKSk7XG5cbiAgY29uc3QgW3Nob3dQb3BvdmVyLCBzZXRTaG93UG9wb3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgZ2V0VmFsdWVDb3VudCA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHByb3BzLnZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRWYWx1ZXMgPSBwcm9wcy5vcHRpb25zLm1hcCgob3B0aW9uOiBPcHRpb25Qcm9wcykgPT4gb3B0aW9uLmlkKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlKSA/IHByb3BzLnZhbHVlIDogW3Byb3BzLnZhbHVlXTtcbiAgICByZXR1cm4gdmFsdWVzLmZpbHRlcigodmFsKSA9PiB2YWxpZFZhbHVlcy5pbmNsdWRlcyh2YWwpKS5sZW5ndGg7XG4gIH07XG5cbiAgY29uc3QgZHJvcGRvd25Qcm9wczoge1xuICAgICdhcmlhLWxhYmVsJz86IHN0cmluZztcbiAgICAnZGF0YS1jeSc/OiBzdHJpbmc7XG4gIH0gPSB7fTtcblxuICBpZiAocHJvcHMubGFiZWxIaWRkZW4pIHtcbiAgICBkcm9wZG93blByb3BzWydhcmlhLWxhYmVsJ10gPSBwcm9wcy5sYWJlbDtcbiAgfVxuXG4gIGNvbnN0IGlzSW50ZXJuYWwgPSAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQpID0+XG4gICAgISFmb2N1c1JlZi5jdXJyZW50ICYmXG4gICAgZXZlbnQucmVsYXRlZFRhcmdldCBpbnN0YW5jZW9mIE5vZGUgJiZcbiAgICBmb2N1c1JlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpO1xuXG4gIGNvbnN0IGhhbmRsZURyb3Bkb3duRm9jdXMgPSAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQpID0+IHtcbiAgICBpZiAocHJvcHMub25Gb2N1cyAmJiAhaXNJbnRlcm5hbChldmVudCkpIHtcbiAgICAgIC8vIE9ubHkgdHJpZ2dlciBvbkZvY3VzIHdoZW4gZm9jdXMgY29tZXMgZnJvbSBvdXRzaWRlIHRoZSBEcm9wZG93biBvciBMaXN0XG4gICAgICBwcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRHJvcGRvd25CbHVyID0gKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50KSA9PiB7XG4gICAgaWYgKHByb3BzLm9uQmx1ciAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQgJiYgIWlzSW50ZXJuYWwoZXZlbnQpKSB7XG4gICAgICAvLyBPbmx5IHRyaWdnZXIgb25CbHVyIHdoZW4gdGhlIGZvY3VzIG1vdmVzIGZyb20gdGhlIERyb3Bkb3duIHRvIG91dHNpZGUgdGhlIGNvbXBvbmVudFxuICAgICAgcHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTGlzdEJsdXIgPSAoZXZlbnQ6IFJlYWN0LkZvY3VzRXZlbnQpID0+IHtcbiAgICAvLyBPbmx5IHRyaWdnZXIgb25CbHVyIHdoZW4gdGhlIGZvY3VzIG1vdmVzIG91dHNpZGUgdGhlIExpc3RcbiAgICBpZiAocHJvcHMub25CbHVyKSB7XG4gICAgICBwcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gaW50ZXJuYWxSZWYuY3VycmVudCkge1xuICAgICAgLy8gTGV0IG9uY0NsaWNrIGhhbmRsZSBjbG9zaW5nIHRoZSBwb3BvdmVyIHdoZW4gdGhlIERyb3Bkb3duIGlzIGNsaWNrZWRcbiAgICAgIHNldFNob3dQb3BvdmVyKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICAvLyBUT0RPIFtKVU4tMTE5M10gTWlncmF0ZSB0aGVzZSBwcm9wcyB0byB0aGUgbGFiZWwgaW5zaWRlIG9mIE11bHRpc2VsZWN0IGFuZCBSZW1vdmUgRmllbGRTdGF0dXNXcmFwcGVyXG4gICAgPEZpZWxkU3RhdHVzV3JhcHBlclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XG4gICAgICBmdWxsTGVuZ3RoXG4gICAgICByZWFkT25seT17cHJvcHMucmVhZE9ubHl9XG4gICAgPlxuICAgICAgeyFwcm9wcy5sYWJlbEhpZGRlbiAmJiAoXG4gICAgICAgIDxSb3cgY2VudGVyPlxuICAgICAgICAgIDxMYWJlbCBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9IGh0bWxGb3I9e3V1aWRSZWYuY3VycmVudH0gcmVxdWlyZWQ9e3Byb3BzLnJlcXVpcmVkfT5cbiAgICAgICAgICAgIHtwcm9wcy5sYWJlbH1cbiAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgIHtwcm9wcy5pbmZvICYmIDxJbmZvQnV0dG9uIGluZm89e3Byb3BzLmluZm99IHRhYkluZGV4PXtwcm9wcy50YWJJbmRleH0gLz59XG4gICAgICAgIDwvUm93PlxuICAgICAgKX1cbiAgICAgIDxkaXYgcmVmPXtmb2N1c1JlZn0+XG4gICAgICAgIDxEcm9wZG93bldyYXBwZXJcbiAgICAgICAgICB7Li4uZHJvcGRvd25Qcm9wc31cbiAgICAgICAgICBsYWJlbEhpZGRlbj17cHJvcHMubGFiZWxIaWRkZW59XG4gICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgICAgIGludmFsaWQ9e3Byb3BzLmludmFsaWR9XG4gICAgICAgICAgcG9wb3Zlck9wZW49e3Nob3dQb3BvdmVyfVxuICAgICAgICAgIHJlYWRPbmx5PXtwcm9wcy5yZWFkT25seX1cbiAgICAgICAgICByZWY9e2Ryb3Bkb3duUmVmc31cbiAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBzdGF0dXM9e3Byb3BzLnN0YXR1c31cbiAgICAgICAgICB0YWJJbmRleD17XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCB8fCBzaG93UG9wb3ZlciA/IHByaW1pdGl2ZXMudGFiSW5kZXguZGlzYWJsZWQgOiBwcm9wcy50YWJJbmRleCB8fCAwXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uQmx1cj17aGFuZGxlRHJvcGRvd25CbHVyfVxuICAgICAgICAgIG9uRm9jdXM9e2hhbmRsZURyb3Bkb3duRm9jdXN9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd1BvcG92ZXIoIXNob3dQb3BvdmVyKX1cbiAgICAgICAgICBvbktleVByZXNzPXsoZTogS2V5Ym9hcmRFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgIGlmICghc2hvd1BvcG92ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUtleUV2ZW50PEhUTUxEaXZFbGVtZW50Pih7XG4gICAgICAgICAgICAgICAgJ0VudGVyfFxcXFxzJzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgc2V0U2hvd1BvcG92ZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSkoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPERyb3Bkb3duVGV4dFxuICAgICAgICAgICAgaHRtbEZvcj17dXVpZFJlZi5jdXJyZW50fVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgcmVxdWlyZWQ9e3Byb3BzLnJlcXVpcmVkfVxuICAgICAgICAgICAgaXNQbGFjZWhvbGRlcj17IXByb3BzLnZhbHVlIHx8ICFwcm9wcy52YWx1ZS5sZW5ndGh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgID8gZ2V0TXVsdGlzZWxlY3RMYWJlbCh7XG4gICAgICAgICAgICAgICAgICBvcHRpb25zOiBwcm9wcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHByb3BzLnBsYWNlaG9sZGVyIHx8ICdTZWxlY3Qgb3B0aW9uKHMpJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA6IGdldFNlbGVjdExhYmVsKHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHByb3BzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIgfHwgJ1NlbGVjdCBvbmUnLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvRHJvcGRvd25UZXh0PlxuICAgICAgICAgIHtwcm9wcy5tdWx0aXBsZSAmJiAhIXByb3BzLnZhbHVlLmxlbmd0aCAmJiBnZXRWYWx1ZUNvdW50KCkgPiAwICYmIChcbiAgICAgICAgICAgIDxCYWRnZT57Z2V0VmFsdWVDb3VudCgpfTwvQmFkZ2U+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8Q2FyZXQ+XG4gICAgICAgICAgICA8Q2hldnJvblxuICAgICAgICAgICAgICBjb2xvcj17cHJvcHMuZGlzYWJsZWQgPyAnTjQwMCcgOiAnTjYwMCd9XG4gICAgICAgICAgICAgIGRpcmVjdGlvbj17c2hvd1BvcG92ZXIgJiYgIXByb3BzLmRpc2FibGVkID8gJ3VwJyA6ICdkb3duJ31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9DYXJldD5cbiAgICAgICAgPC9Ecm9wZG93bldyYXBwZXI+XG4gICAgICAgIHtzaG93UG9wb3ZlciAmJiAhcHJvcHMuZGlzYWJsZWQgJiYgKFxuICAgICAgICAgIDxMaXN0XG4gICAgICAgICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICAgICAgICAgIGlkPXt1dWlkUmVmLmN1cnJlbnR9XG4gICAgICAgICAgICB0b2dnbGVSZWY9e2ludGVybmFsUmVmfVxuICAgICAgICAgICAgb25CbHVyPXtoYW5kbGVMaXN0Qmx1cn1cbiAgICAgICAgICAgIG9uRXNjYXBlPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldFNob3dQb3BvdmVyKGZhbHNlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvblNlbGVjdD17XG4gICAgICAgICAgICAgIHByb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgPyAoKSA9PiB7fVxuICAgICAgICAgICAgICAgIDogKGU6IFJlYWN0LkZvY3VzRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFudWFsbHkgdHJpZ2dlciBsaXN0IGJsdXIgdG8gdmFsaWRhdGUgYWZ0ZXIgYSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxSZWYuY3VycmVudD8uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2hvd1BvcG92ZXIoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMub25Gb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZm9jdXMgdG8gcmVzdW1lIGBhY3RpdmVgIHN0YXR1cyBmb3IgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgcHJvcHMub25Gb2N1cyhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS1jeT1cIm11bHRpc2VsZWN0LWxpc3RcIlxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZpZWxkU3RhdHVzV3JhcHBlcj5cbiAgKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IGNvbG9yIGZyb20gJ0B3ZWRnZWtpdC9jb2xvcic7XG5pbXBvcnQgcHJpbWl0aXZlcywgeyBnZXRCYXNlUHggfSBmcm9tICdAd2VkZ2VraXQvcHJpbWl0aXZlcyc7XG5cbi8vIFRPRE86IFtKVU4tNDgxXSBFaXRoZXIgc3RhbmRhcmRpemUgbGluZS1oZWlnaHQgYXMgMS41ICogZm9udC1zaXplIG9yIHJlbW92ZSB0aGlzIGNvbW1tZW50XG5jb25zdCBCYWRnZSA9IHN0eWxlZC5kaXZgXG4gIGdyaWQtY29sdW1uOiAyLzM7XG4gIG1hcmdpbi1yaWdodDogJHtnZXRCYXNlUHgoMyl9O1xuICBoZWlnaHQ6ICR7Z2V0QmFzZVB4KDYpfTtcbiAgYm9yZGVyLXJhZGl1czogJHtwcmltaXRpdmVzLmJhc2UgKiAzfXB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3IuQjIwMH07XG4gIGNvbG9yOiAke2NvbG9yLkI2MDB9O1xuICBmb250LWZhbWlseTogJHtwcmltaXRpdmVzLmZvbnRGYW1pbHl9O1xuICBmb250LXdlaWdodDogJHtwcmltaXRpdmVzLmZvbnRXZWlnaHQubGlua307XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG4gIGZvbnQtc2l6ZTogJHtwcmltaXRpdmVzLmZvbnRTaXplLmlucHV0fXB4O1xuICAkeyh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBjaGFyQ291bnQgPSBjaGlsZHJlbj8udG9TdHJpbmcoKS5sZW5ndGggfHwgMDtcbiAgICByZXR1cm4gYHdpZHRoOiAke3ByaW1pdGl2ZXMuYmFzZSAqICg0ICsgMiAqIGNoYXJDb3VudCl9cHg7YDtcbiAgfX07XG5gO1xuXG4vKiBtaW4td2lkdGg6ICR7Z2V0QmFzZVB4KDYpfTsgKi9cbmV4cG9ydCBkZWZhdWx0IEJhZGdlO1xuIiwgImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBnZXRCYXNlUHggfSBmcm9tICdAd2VkZ2VraXQvcHJpbWl0aXZlcyc7XG5cbmNvbnN0IENhcmV0ID0gc3R5bGVkLmRpdmBcbiAgZ3JpZC1jb2x1bW46IDMvNDtcbiAgaGVpZ2h0OiAke2dldEJhc2VQeCg0KX07XG4gIHdpZHRoOiAke2dldEJhc2VQeCg0KX07XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBDYXJldDtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IGNvbG9yIGZyb20gJ0B3ZWRnZWtpdC9jb2xvcic7XG5pbXBvcnQgcHJpbWl0aXZlcywgeyBVcGRhdGVkSW5wdXRNaXhpbiwgZ2V0QmFzZVB4IH0gZnJvbSAnQHdlZGdla2l0L3ByaW1pdGl2ZXMnO1xuXG5jb25zdCBEcm9wZG93biA9IHN0eWxlZC5kaXY8e1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGludmFsaWQ/OiBib29sZWFuO1xuICBsYWJlbEhpZGRlbj86IGJvb2xlYW47XG4gIHBvcG92ZXJPcGVuPzogYm9vbGVhbjtcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xuICBzdGF0dXM/OiAnZGVmYXVsdCcgfCAnZXJyb3InIHwgJ3N1Y2Nlc3MnIHwgJ3BlbmRpbmcnO1xufT5gXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJHtVcGRhdGVkSW5wdXRNaXhpbn1cbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZGlzcGxheTogaW5saW5lLWdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWlubWF4KDAsIDFmcikgbWluLWNvbnRlbnQgbWluLWNvbnRlbnQ7XG4gIHBhZGRpbmc6IDAgJHtnZXRCYXNlUHgoMyl9O1xuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyOiAkeyh7IGRpc2FibGVkLCBwb3BvdmVyT3BlbiB9KSA9PlxuICAgICFkaXNhYmxlZCAmJiBwb3BvdmVyT3BlbiAmJiBgJHtwcmltaXRpdmVzLmJvcmRlci53aWR0aC5zdGFuZGFyZH1weCBzb2xpZCAke2NvbG9yLkI1MDB9YH07XG4gIGJveC1zaGFkb3c6ICR7KHsgZGlzYWJsZWQsIHBvcG92ZXJPcGVuIH0pID0+XG4gICAgIWRpc2FibGVkICYmIHBvcG92ZXJPcGVuICYmIGBpbnNldCAwIDAgMCAuNXB4ICR7Y29sb3IuQjUwMH1gfTtcbiAgJjpmb2N1cyB7XG4gIH1cbmA7XG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJ0B3ZWRnZWtpdC9wcmltaXRpdmVzJztcbmltcG9ydCBjb2xvcnMgZnJvbSAnQHdlZGdla2l0L2NvbG9yJztcblxudHlwZSBQcm9wcyA9IHtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBodG1sRm9yPzogc3RyaW5nO1xuICBpc1BsYWNlaG9sZGVyPzogYm9vbGVhbjtcbiAgcmVxdWlyZWQ/OiBib29sZWFuO1xufTtcblxuY29uc3QgRHJvcGRvd25UZXh0ID0gc3R5bGVkKFRleHQpPFByb3BzPmBcbiAgY29sb3I6ICR7KHsgZGlzYWJsZWQsIGlzUGxhY2Vob2xkZXIgfSkgPT4gKGRpc2FibGVkIHx8IGlzUGxhY2Vob2xkZXIpICYmIGNvbG9ycy5ONDAwfTtcbiAgZ3JpZC1jb2x1bW46IDEvMjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93blRleHQ7XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IExhYmVsIGFzIEJhc2VMYWJlbCB9IGZyb20gJ0B3ZWRnZWtpdC9wcmltaXRpdmVzJztcblxuLyoqXG4gKiBUaGlzIGV4aXN0cyBhcyBhIHNlcGFyYXRlIHN0eWxlZCBjb21wb25lbnQgZnJvbSB0aGUgYmFzZSBsYWJlbCBmcm9tIEB3ZWRnZWtpdC9wcmltaXRpdmVzIHRvIGlzb2xhdGUgaXQgZm9yXG4gKiBleHRlcm5hbCBzdHlsaW5nLlxuICovXG5jb25zdCBMYWJlbCA9IHN0eWxlZChCYXNlTGFiZWwpYGA7XG5cbmV4cG9ydCBkZWZhdWx0IExhYmVsO1xuIiwgImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnQHdlZGdla2l0L2J1dHRvbic7XG5pbXBvcnQgeyB1c2VDb250YWluZXJFdmVudCB9IGZyb20gJ0B3ZWRnZWtpdC9ob29rcyc7XG5cbmltcG9ydCB7IGdldE5ld1ZhbHVlLCBnZXROZXdJbmRleCwgd2l0aEVzY2FwZVdhdGNoZXIgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7XG4gIEFjdGlvbkJhcixcbiAgRmlsdGVyLFxuICBNdWx0aXNlbGVjdE9wdGlvbixcbiAgT3B0aW9uTGlzdCxcbiAgT3B0aW9uVGV4dCxcbiAgT3B0aW9uc1dyYXBwZXIsXG4gIFNlbGVjdE9wdGlvbixcbiAgU3BhY2UsXG4gIFN0eWxlZFBvcG92ZXIsXG59IGZyb20gJy4vc3R5bGVkJztcblxuaW1wb3J0IHsgTGlzdFByb3BzLCBPcHRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuY29uc3QgTGlzdCA9IChwcm9wczogTGlzdFByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhY3Rpb25CYXIsXG4gICAgZmlsdGVyOiBkaXNwbGF5RmlsdGVyLFxuICAgIGZpbHRlclBsYWNlaG9sZGVyLFxuICAgIGxhYmVsLFxuICAgIG11bHRpcGxlLFxuICAgIG9wdGlvbnMsXG4gICAgdG9nZ2xlUmVmLFxuICAgIHZhbHVlLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkVzY2FwZSxcbiAgICBvblNlbGVjdCxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGFjdGl2ZU9wdGlvblJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgaW50ZXJuYWxGb2N1c1JlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGNoZWNrYm94TGlzdFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGZpbHRlclJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBbZmlsdGVyLCBzZXRGaWx0ZXJdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IFtmaWx0ZXJlZE9wdGlvbnMsIHNldEZpbHRlcmVkT3B0aW9uc10gPSB1c2VTdGF0ZShcbiAgICBvcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24ubGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXIudG9Mb3dlckNhc2UoKSkpLFxuICApO1xuXG4gIGNvbnN0IFthY3RpdmVPcHRpb25JZHgsIHNldEFjdGl2ZU9wdGlvbklkeF0gPSB1c2VTdGF0ZShcbiAgICAhIXZhbHVlID09PSAhIVtdID8gMCA6IGZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgoKG9wdGlvbikgPT4gdmFsdWUuaW5jbHVkZXMob3B0aW9uLmlkKSksXG4gICk7XG5cbiAgY29uc3QgW2FsbFNlbGVjdGVkLCBzZXRBbGxTZWxlY3RlZF0gPSB1c2VTdGF0ZShcbiAgICB2YWx1ZSA9PT0gZmlsdGVyZWRPcHRpb25zLm1hcCgob3B0aW9uKSA9PiBvcHRpb24uaWQpLFxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlT3B0aW9uUmVmLmN1cnJlbnQ/LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ25lYXJlc3QnIH0pO1xuICB9LCBbYWN0aXZlT3B0aW9uSWR4XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGlzcGxheUZpbHRlcikge1xuICAgICAgZmlsdGVyUmVmLmN1cnJlbnQhLmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrYm94TGlzdFJlZi5jdXJyZW50IS5mb2N1cygpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHVzZUNvbnRhaW5lckV2ZW50KGludGVybmFsRm9jdXNSZWYsIHtcbiAgICBzY3JvbGw6IChlOiBFdmVudCwgaW5zaWRlOiBib29sZWFuKSA9PiB7XG4gICAgICBpZiAoIWluc2lkZSAmJiBvbkVzY2FwZSkge1xuICAgICAgICBvbkVzY2FwZShlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBoYW5kbGVGaWx0ZXJDaGFuZ2UgPSAobmV3RmlsdGVyOiBzdHJpbmcpID0+IHtcbiAgICBzZXRGaWx0ZXIobmV3RmlsdGVyKTtcbiAgICBzZXRGaWx0ZXJlZE9wdGlvbnMoXG4gICAgICBvcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24ubGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhuZXdGaWx0ZXIudG9Mb3dlckNhc2UoKSkpLFxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGNvbnN0IGN1cnJlbnRJZHggPSBwYXJzZUludChvcHRpb24uZ2V0QXR0cmlidXRlKCdkYXRhLWlkeCcpISwgMTApO1xuXG4gICAgY29uc3QgbmV3VmFsdWUgPSBnZXROZXdWYWx1ZSh7XG4gICAgICBtdWx0aXBsZSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBmaWx0ZXJlZE9wdGlvbnMsXG4gICAgICBjdXJyZW50SWR4LFxuICAgICAgcHJldmlvdXNJZHg6IGFjdGl2ZU9wdGlvbklkeCxcbiAgICAgIHNoaWZ0RG93bjogZXZlbnQuc2hpZnRLZXksXG4gICAgICB2YWx1ZSxcbiAgICB9KTtcblxuICAgIG9uQ2hhbmdlKG5ld1ZhbHVlLCBldmVudCk7XG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdCgoZXZlbnQgYXMgdW5rbm93bikgYXMgUmVhY3QuRm9jdXNFdmVudCk7XG4gICAgfVxuICAgIHNldEFjdGl2ZU9wdGlvbklkeChjdXJyZW50SWR4KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldEFjdGl2ZU9wdGlvbklkeChnZXROZXdJbmRleChhY3RpdmVPcHRpb25JZHgsIDEsIGZpbHRlcmVkT3B0aW9ucy5sZW5ndGgpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0QWN0aXZlT3B0aW9uSWR4KGdldE5ld0luZGV4KGFjdGl2ZU9wdGlvbklkeCwgLTEsIGZpbHRlcmVkT3B0aW9ucy5sZW5ndGgpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdFbmQnOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXRBY3RpdmVPcHRpb25JZHgoZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXRBY3RpdmVPcHRpb25JZHgoMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnICc6XG4gICAgICBjYXNlICdTcGFjZUJhcic6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFjdGl2ZU9wdGlvblJlZi5jdXJyZW50IS5jbGljaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNsZWFyQWxsID0gKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PikgPT4ge1xuICAgIHNldEFsbFNlbGVjdGVkKGZhbHNlKTtcbiAgICBvbkNoYW5nZShbXSwgKGV2ZW50IGFzIHVua25vd24pIGFzIFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTZWxlY3RBbGwgPSAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB7XG4gICAgaWYgKGFsbFNlbGVjdGVkKSB7XG4gICAgICBoYW5kbGVDbGVhckFsbChldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFsbFZhbHVlcyA9IGZpbHRlcmVkT3B0aW9ucy5yZWR1Y2U8c3RyaW5nW10+KChhY2MsIGN1cjogT3B0aW9uUHJvcHMpID0+IHtcbiAgICAgICAgYWNjLnB1c2goY3VyLmlkKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIFtdKTtcbiAgICAgIHNldEFsbFNlbGVjdGVkKHRydWUpO1xuICAgICAgb25DaGFuZ2UoYWxsVmFsdWVzLCAoZXZlbnQgYXMgdW5rbm93bikgYXMgUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gKGV2ZW50OiBSZWFjdC5Gb2N1c0V2ZW50KSA9PiB7XG4gICAgLy8gT25seSB0cmlnZ2VyIG9uQmx1ciB3aGVuIHRoZSBmb2N1cyBtb3ZlcyBvdXRzaWRlIHRoZSBMaXN0XG4gICAgY29uc3QgaW50ZXJuYWxGb2N1cyA9XG4gICAgICAhIWludGVybmFsRm9jdXNSZWYuY3VycmVudCAmJlxuICAgICAgZXZlbnQucmVsYXRlZFRhcmdldCBpbnN0YW5jZW9mIE5vZGUgJiZcbiAgICAgIGludGVybmFsRm9jdXNSZWYuY3VycmVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcbiAgICBpZiAoIWludGVybmFsRm9jdXMgJiYgb25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZWRQb3BvdmVyXG4gICAgICBub2RlPXt0b2dnbGVSZWYuY3VycmVudCF9XG4gICAgICByZWY9e2ludGVybmFsRm9jdXNSZWZ9XG4gICAgICBvbkV4aXQ9e29uRXNjYXBlfVxuICAgICAgZW5hYmxlZD17ZmFsc2V9XG4gICAgPlxuICAgICAgPE9wdGlvbnNXcmFwcGVyIGRhdGEtcGFyZW50PXtsYWJlbH0gdG9nZ2xlUmVmPXt0b2dnbGVSZWZ9IHRhYkluZGV4PXstMX0gb25CbHVyPXtoYW5kbGVCbHVyfT5cbiAgICAgICAge2Rpc3BsYXlGaWx0ZXIgJiYgKFxuICAgICAgICAgIDxGaWx0ZXJcbiAgICAgICAgICAgIGRhdGEtcGFyZW50PXtsYWJlbH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgbGFiZWw9e2BGaWx0ZXIgJHtsYWJlbH0gc2VsZWN0YH1cbiAgICAgICAgICAgIGxhYmVsSGlkZGVuXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17ZmlsdGVyUGxhY2Vob2xkZXIgfHwgJ1NlYXJjaCd9XG4gICAgICAgICAgICByZWY9e2ZpbHRlclJlZn1cbiAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17KG5ld0ZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICBoYW5kbGVGaWx0ZXJDaGFuZ2UobmV3RmlsdGVyKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICAgICAgICBzdGF0dXM9XCJkZWZhdWx0XCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8T3B0aW9uTGlzdFxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGRhdGEtcGFyZW50PXtsYWJlbH1cbiAgICAgICAgICBpZD17YCR7bGFiZWx9LWxpc3Rib3hgfVxuICAgICAgICAgIHJvbGU9XCJsaXN0Ym94XCJcbiAgICAgICAgICByZWY9e2NoZWNrYm94TGlzdFJlZn1cbiAgICAgICAgICB0YWJJbmRleD17ZGlzcGxheUZpbHRlciA/IC0xIDogMH1cbiAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XG4gICAgICAgID5cbiAgICAgICAgICB7ZmlsdGVyZWRPcHRpb25zLm1hcCgob3B0aW9uLCBpZHgpID0+XG4gICAgICAgICAgICBtdWx0aXBsZSA/IChcbiAgICAgICAgICAgICAgPE11bHRpc2VsZWN0T3B0aW9uXG4gICAgICAgICAgICAgICAgYWN0aXZlPXthY3RpdmVPcHRpb25JZHggPT09IGlkeH1cbiAgICAgICAgICAgICAgICBkYXRhLWlkeD17aWR4fVxuICAgICAgICAgICAgICAgIGRhdGEtcGFyZW50PXtsYWJlbH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17b3B0aW9uLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgIGlkPXtgJHtsYWJlbH0tJHtvcHRpb24uaWR9YH1cbiAgICAgICAgICAgICAgICBrZXk9e2BvcHRpb24tJHtvcHRpb24uaWR9YH1cbiAgICAgICAgICAgICAgICBsYWJlbD17b3B0aW9uLmxhYmVsfVxuICAgICAgICAgICAgICAgIG5hbWU9e29wdGlvbi5pZH1cbiAgICAgICAgICAgICAgICByZWY9e2lkeCA9PT0gYWN0aXZlT3B0aW9uSWR4ID8gYWN0aXZlT3B0aW9uUmVmIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIHJvbGU9XCJvcHRpb25cIlxuICAgICAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17bXVsdGlwbGUgPyB2YWx1ZS5pbmNsdWRlcyhvcHRpb24uaWQpIDogdmFsdWVbMF0gPT09IG9wdGlvbi5pZH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge319XG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8U2VsZWN0T3B0aW9uXG4gICAgICAgICAgICAgICAgYWN0aXZlPXthY3RpdmVPcHRpb25JZHggPT09IGlkeH1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgICAgYXJpYS1zZWxlY3RlZD17dmFsdWVbMF0gPT09IG9wdGlvbi5pZH1cbiAgICAgICAgICAgICAgICBkYXRhLXBhcmVudD17bGFiZWx9XG4gICAgICAgICAgICAgICAgZGF0YS1pZHg9e2lkeH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17b3B0aW9uLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgIGlkPXtgJHtvcHRpb24uaWR9YH1cbiAgICAgICAgICAgICAgICBrZXk9e2BvcHRpb24tJHtvcHRpb24uaWR9YH1cbiAgICAgICAgICAgICAgICByZWY9e2lkeCA9PT0gYWN0aXZlT3B0aW9uSWR4ID8gYWN0aXZlT3B0aW9uUmVmIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIHJvbGU9XCJvcHRpb25cIlxuICAgICAgICAgICAgICAgIHRhYkluZGV4PXstMX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVbMF0gPT09IG9wdGlvbi5pZH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxPcHRpb25UZXh0IGRhdGEtcGFyZW50PXtsYWJlbH0gdGFiSW5kZXg9ey0xfT5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgICAgPC9PcHRpb25UZXh0PlxuICAgICAgICAgICAgICA8L1NlbGVjdE9wdGlvbj5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9PcHRpb25MaXN0PlxuICAgICAgPC9PcHRpb25zV3JhcHBlcj5cbiAgICAgIHttdWx0aXBsZSAmJiAhIWFjdGlvbkJhciAmJiAoXG4gICAgICAgIDxBY3Rpb25CYXIgZGF0YS1wYXJlbnQ9e2xhYmVsfSB0b2dnbGVSZWY9e3RvZ2dsZVJlZn0gb25CbHVyPXtoYW5kbGVCbHVyfT5cbiAgICAgICAgICB7KHR5cGVvZiBhY3Rpb25CYXIgPT09ICdib29sZWFuJyB8fCBhY3Rpb25CYXIuc2VsZWN0QWxsKSAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRhdGEtcGFyZW50PXtsYWJlbH1cbiAgICAgICAgICAgICAgZG9tYWluPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgdmFyaWFudD1cIm5vRmlsbFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNlbGVjdEFsbH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3R5cGVvZiBhY3Rpb25CYXIgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgIGFjdGlvbkJhci5zZWxlY3RBbGwgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIGFjdGlvbkJhci5zZWxlY3RBbGwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBhY3Rpb25CYXIuc2VsZWN0QWxsXG4gICAgICAgICAgICAgICAgOiAnU2VsZWN0IEFsbCd9XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTcGFjZSAvPlxuICAgICAgICAgIHsodHlwZW9mIGFjdGlvbkJhciA9PT0gJ2Jvb2xlYW4nIHx8IGFjdGlvbkJhci5jbGVhckFsbCkgJiYgKFxuICAgICAgICAgICAgPEJ1dHRvbiBkYXRhLXBhcmVudD17bGFiZWx9IGRvbWFpbj1cInByaW1hcnlcIiB2YXJpYW50PVwibm9GaWxsXCIgb25DbGljaz17aGFuZGxlQ2xlYXJBbGx9PlxuICAgICAgICAgICAgICB7dHlwZW9mIGFjdGlvbkJhciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgYWN0aW9uQmFyLmNsZWFyQWxsICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBhY3Rpb25CYXIuY2xlYXJBbGwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBhY3Rpb25CYXIuY2xlYXJBbGxcbiAgICAgICAgICAgICAgICA6ICdDbGVhciBBbGwnfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9BY3Rpb25CYXI+XG4gICAgICApfVxuICAgIDwvU3R5bGVkUG9wb3Zlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhFc2NhcGVXYXRjaGVyKExpc3QpO1xuIiwgImltcG9ydCB7IE9wdGlvblByb3BzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuXG50eXBlIE5ld1ZhbHVlVHlwZSA9IHtcbiAgbXVsdGlwbGU/OiBib29sZWFuO1xuICBvcHRpb25zOiBPcHRpb25Qcm9wc1tdO1xuICBmaWx0ZXJlZE9wdGlvbnM/OiBPcHRpb25Qcm9wc1tdO1xuICBjdXJyZW50SWR4OiBudW1iZXI7XG4gIHByZXZpb3VzSWR4OiBudW1iZXI7XG4gIHNoaWZ0RG93bjogYm9vbGVhbjtcbiAgdmFsdWU6IHN0cmluZ1tdO1xufTtcblxuY29uc3QgZ2V0TmV3VmFsdWUgPSAoe1xuICBtdWx0aXBsZSA9IGZhbHNlLFxuICBvcHRpb25zLFxuICBmaWx0ZXJlZE9wdGlvbnMgPSBvcHRpb25zLFxuICBjdXJyZW50SWR4LFxuICBwcmV2aW91c0lkeCxcbiAgc2hpZnREb3duLFxuICB2YWx1ZSxcbn06IE5ld1ZhbHVlVHlwZSkgPT4ge1xuICBpZiAoIW11bHRpcGxlKSB7XG4gICAgcmV0dXJuIFtmaWx0ZXJlZE9wdGlvbnNbY3VycmVudElkeF0uaWRdO1xuICB9XG5cbiAgY29uc3QgW3N0YXJ0Q2hhbmdlSWR4LCBlbmRDaGFuZ2VJZHhdID0gW2N1cnJlbnRJZHgsIHByZXZpb3VzSWR4XS5zb3J0KCk7XG5cbiAgcmV0dXJuIG9wdGlvbnMucmVkdWNlKChuZXdWYWx1ZSwgb3B0aW9uKSA9PiB7XG4gICAgY29uc3QgY3VycmVudGx5U2VsZWN0ZWQgPSB2YWx1ZS5pbmNsdWRlcyhvcHRpb24uaWQpO1xuICAgIGNvbnN0IG9wdGlvbklkeCA9IGZpbHRlcmVkT3B0aW9ucy5maW5kSW5kZXgoXG4gICAgICAoZmlsdGVyZWRPcHRpb24pID0+IGZpbHRlcmVkT3B0aW9uLmlkID09PSBvcHRpb24uaWQsXG4gICAgKTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9uSWR4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGN1cnJlbnRseVNlbGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBuZXdWYWx1ZS5jb25jYXQob3B0aW9uLmlkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoc2hpZnREb3duKSB7XG4gICAgICBjb25zdCBhZGRPcHRpb24gPSBzdGFydENoYW5nZUlkeCA8PSBvcHRpb25JZHggJiYgb3B0aW9uSWR4IDw9IGVuZENoYW5nZUlkeDtcbiAgICAgIGlmIChjdXJyZW50bHlTZWxlY3RlZCB8fCBhZGRPcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlLmNvbmNhdChvcHRpb24uaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZU9wdGlvbiA9IGN1cnJlbnRJZHggPT09IG9wdGlvbklkeDtcbiAgICBjb25zdCBhZGRPcHRpb24gPSBjdXJyZW50bHlTZWxlY3RlZCB8fCB0b2dnbGVPcHRpb247XG4gICAgY29uc3QgcmVtb3ZlT3B0aW9uID0gY3VycmVudGx5U2VsZWN0ZWQgJiYgdG9nZ2xlT3B0aW9uO1xuXG4gICAgaWYgKGFkZE9wdGlvbiAmJiAhcmVtb3ZlT3B0aW9uKSB7XG4gICAgICByZXR1cm4gbmV3VmFsdWUuY29uY2F0KG9wdGlvbi5pZCk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfSwgW10gYXMgc3RyaW5nW10pO1xufTtcbmV4cG9ydCBkZWZhdWx0IGdldE5ld1ZhbHVlO1xuIiwgImV4cG9ydCBkZWZhdWx0IChzdGFydElkeDogbnVtYmVyLCBtb3ZlOiBudW1iZXIsIGxpc3RMZW5ndGg6IG51bWJlcikgPT4ge1xuICBjb25zdCBhID0gc3RhcnRJZHggKyBtb3ZlO1xuICBjb25zdCBuID0gbGlzdExlbmd0aDtcbiAgcmV0dXJuICgoYSAlIG4pICsgbikgJSBuO1xufTtcbiIsICJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICB0b2dnbGVSZWY/OiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuICBvbkVzY2FwZT86IChlPzogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG59O1xuXG5jb25zdCB3aXRoRXNjYXBlV2F0Y2hlciA9IDxQIGV4dGVuZHMgUHJvcHM+KENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPikgPT4gKHByb3BzOiBQKSA9PiB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChwcm9wcy5vbkVzY2FwZSkge1xuICAgICAgICAgIHByb3BzLm9uRXNjYXBlKGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy50b2dnbGVSZWYgJiYgcHJvcHMudG9nZ2xlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBwcm9wcy50b2dnbGVSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoRXNjYXBlV2F0Y2hlcjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgZ2V0QmFzZVB4IH0gZnJvbSAnQHdlZGdla2l0L3ByaW1pdGl2ZXMnO1xuXG5jb25zdCBBY3Rpb25CYXIgPSBzdHlsZWQuZGl2PHsgdG9nZ2xlUmVmOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+IH0+YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBidXR0b24ge1xuICAgIG1hcmdpbjogJHtnZXRCYXNlUHgoMil9O1xuICB9XG4gIGJveC1zaGFkb3c6IDAgLTJweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMSk7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25CYXI7XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBJbnB1dCBmcm9tICdAd2VkZ2VraXQvaW5wdXQnO1xuaW1wb3J0IHsgZ2V0QmFzZVB4IH0gZnJvbSAnQHdlZGdla2l0L3ByaW1pdGl2ZXMnO1xuXG5jb25zdCBGaWx0ZXIgPSBzdHlsZWQoSW5wdXQpYFxuICBtYXJnaW4tdG9wOiAwcHg7XG4gIG1hcmdpbi1ib3R0b206ICR7Z2V0QmFzZVB4KDMpfTtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlcjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IENoZWNrYm94LCB7IFN0eWxlZExhYmVsIH0gZnJvbSAnQHdlZGdla2l0L2NoZWNrYm94JztcbmltcG9ydCBjb2xvciBmcm9tICdAd2VkZ2VraXQvY29sb3InO1xuXG5jb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSAoYWN0aXZlOiBib29sZWFuLCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICByZXR1cm4gY29sb3IuQjEwMDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yLkIyMDA7XG4gIH1cbiAgaWYgKGFjdGl2ZSkge1xuICAgIHJldHVybiBjb2xvci5OMTAwO1xuICB9XG4gIHJldHVybiBjb2xvci5OMDUwO1xufTtcblxuY29uc3QgTXVsdGlzZWxlY3RPcHRpb24gPSBzdHlsZWQoQ2hlY2tib3gpPHsgYWN0aXZlOiBib29sZWFuOyB2YWx1ZTogYm9vbGVhbiB9PmBcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICBwYWRkaW5nOiAwIDRweDtcbiAgd2lkdGg6IDEwMCU7XG5cbiAgJjo6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDEycHg7XG4gIH1cblxuICAmOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgfVxuXG4gICR7U3R5bGVkTGFiZWx9IHtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IGFjdGl2ZSwgdmFsdWUgfSkgPT4gZ2V0QmFja2dyb3VuZENvbG9yKGFjdGl2ZSwgdmFsdWUpfTtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIG1hcmdpbjogMCAtMTZweDtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIHBhZGRpbmc6IDZweCAxMnB4O1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kOiAkeyh7IHZhbHVlIH0pID0+ICh2YWx1ZSA/IGNvbG9yLkIxMDAgOiBjb2xvci5OMTAwKX07XG4gICAgICBsYWJlbCB7XG4gICAgICAgIGNvbG9yOiAke2NvbG9yLk42MDB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlzZWxlY3RPcHRpb247XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZC5kaXZgXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gIH1cbmA7XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IFRleHQgfSBmcm9tICdAd2VkZ2VraXQvcHJpbWl0aXZlcyc7XG5cbi8vIFRPRE86IFtKVU4tNDgxXSBFaXRoZXIgc3RhbmRhcmRpemUgbGluZS1oZWlnaHQgYXMgMS41ICogZm9udC1zaXplIG9yIHJlbW92ZSB0aGlzIGNvbW1tZW50XG5jb25zdCBPcHRpb25UZXh0ID0gc3R5bGVkKFRleHQpYFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgbWFyZ2luOiA4cHggMHB4O1xuICBsaW5lLWhlaWdodDogMS41cmVtO1xuXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvblRleHQ7XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IElucHV0V3JhcHBlciB9IGZyb20gJ0B3ZWRnZWtpdC9pbnB1dCc7XG5cbmltcG9ydCBwcmltaXRpdmVzLCB7IGdldEJhc2VQeCB9IGZyb20gJ0B3ZWRnZWtpdC9wcmltaXRpdmVzJztcblxuY29uc3QgT3B0aW9uV3JhcHBlciA9IHN0eWxlZC5kaXY8eyB0b2dnbGVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD4gfT5gXG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG1heC1oZWlnaHQ6IDMwdmg7XG4gIHdpZHRoOiAkeyh7IHRvZ2dsZVJlZiB9KSA9PlxuICAgIHRvZ2dsZVJlZi5jdXJyZW50ICYmIGAke3RvZ2dsZVJlZi5jdXJyZW50LmNsaWVudFdpZHRoIC0gcHJpbWl0aXZlcy5iYXNlICogNn1weGB9O1xuICBwYWRkaW5nOiAke2dldEJhc2VQeCgzKX07XG5cbiAgJHtJbnB1dFdyYXBwZXJ9IHtcbiAgICBtYXJnaW46IDBweDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgT3B0aW9uV3JhcHBlcjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IGNvbG9yIGZyb20gJ0B3ZWRnZWtpdC9jb2xvcic7XG5pbXBvcnQgeyBDdXJzb3JNaXhpbiwgZ2V0QmFzZVB4IH0gZnJvbSAnQHdlZGdla2l0L3ByaW1pdGl2ZXMnO1xuXG5jb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSAodmFsdWU6IGJvb2xlYW4sIGFjdGl2ZTogYm9vbGVhbikgPT4ge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICByZXR1cm4gY29sb3IuQjEwMDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yLkIyMDA7XG4gIH1cbiAgaWYgKGFjdGl2ZSkge1xuICAgIHJldHVybiBjb2xvci5OMTAwO1xuICB9XG4gIHJldHVybiBjb2xvci5OMDUwO1xufTtcblxuY29uc3QgU2VsZWN0T3B0aW9uID0gc3R5bGVkLmRpdjx7IGFjdGl2ZTogYm9vbGVhbjsgZGlzYWJsZWQ/OiBib29sZWFuOyB2YWx1ZTogYm9vbGVhbiB9PmBcbiAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiAkeyh7IHZhbHVlLCBhY3RpdmUgfSkgPT4gZ2V0QmFja2dyb3VuZENvbG9yKHZhbHVlLCBhY3RpdmUpfTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW46IDAgLSR7Z2V0QmFzZVB4KDMpfSAke2dldEJhc2VQeCgxKX0gLSR7Z2V0QmFzZVB4KDMpfTtcbiAgcGFkZGluZzogMCAke2dldEJhc2VQeCgzKX07XG4gICR7Q3Vyc29yTWl4aW59O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnMgZWFzZS1vdXQ7XG5cbiAgJiBkaXYge1xuICAgIGZsZXg6IDE7XG4gIH1cblxuICAmOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG5cbiAgbGFiZWwge1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgJjpmb2N1cyB7XG4gICAgICBjb2xvcjogJHtjb2xvci5ONjAwfTtcbiAgICB9XG4gIH1cblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAkeyh7IHZhbHVlIH0pID0+ICh2YWx1ZSA/IGNvbG9yLkIxMDAgOiBjb2xvci5OMTAwKX07XG4gICAgbGFiZWwge1xuICAgICAgY29sb3I6ICR7Y29sb3IuTjYwMH07XG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RPcHRpb247XG4iLCAiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IFNwYWNlID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMTtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IFNwYWNlO1xuIiwgImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgY29sb3IgZnJvbSAnQHdlZGdla2l0L2NvbG9yJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJ0B3ZWRnZWtpdC9wb3BvdmVyJztcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkKFBvcG92ZXIpYFxuICBiYWNrZ3JvdW5kOiAke2NvbG9yLk4wNTB9O1xuYDtcbiIsICJpbXBvcnQgeyBPcHRpb25Qcm9wcyB9IGZyb20gJ0B3ZWRnZWtpdC9jaGVja2JveC1saXN0JztcblxudHlwZSBJbnNpZGVMYWJlbFR5cGUgPSB7XG4gIG9wdGlvbnM6IE9wdGlvblByb3BzW107XG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gIHZhbHVlPzogc3RyaW5nW107XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoeyBvcHRpb25zLCB2YWx1ZSwgcGxhY2Vob2xkZXIgfTogSW5zaWRlTGFiZWxUeXBlKSA9PiB7XG4gIGlmICghdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcbiAgICBjb25zdCB2YWx1ZUlzT3B0aW9uID0gb3B0aW9ucy5maW5kKChvcHRpb246IE9wdGlvblByb3BzKSA9PiBvcHRpb24uaWQgPT09IGN1cik7XG4gICAgaWYgKCF2YWx1ZUlzT3B0aW9uKSB7XG4gICAgICByZXR1cm4gYWNjID09PSAnJyA/IHBsYWNlaG9sZGVyIDogYWNjO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gdmFsdWVJc09wdGlvbi5sYWJlbDtcblxuICAgIGlmIChhY2MgIT09ICcnKSB7XG4gICAgICByZXR1cm4gYCR7YWNjfSwgJHtuYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtuYW1lfWA7XG4gIH0sIGBgKTtcbn07XG4iLCAiaW1wb3J0IHsgT3B0aW9uUHJvcHMgfSBmcm9tICdAd2VkZ2VraXQvY2hlY2tib3gtbGlzdCc7XG5cbnR5cGUgSW5zaWRlTGFiZWxUeXBlID0ge1xuICBvcHRpb25zOiBPcHRpb25Qcm9wc1tdO1xuICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nW107XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoeyBvcHRpb25zLCB2YWx1ZSwgcGxhY2Vob2xkZXIgfTogSW5zaWRlTGFiZWxUeXBlKSA9PiB7XG4gIGNvbnN0IHZhbHVlSXNPcHRpb24gPSBvcHRpb25zLmZpbmQoKG9wdGlvbjogT3B0aW9uUHJvcHMpID0+IG9wdGlvbi5pZCA9PT0gdmFsdWVbMF0pO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCAhdmFsdWVJc09wdGlvbikge1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfVxuICByZXR1cm4gdmFsdWVJc09wdGlvbi5sYWJlbDtcbn07XG4iLCAiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XG5cbmltcG9ydCB7IE9wdGlvblByb3BzIH0gZnJvbSAnQHdlZGdla2l0L2NoZWNrYm94LWxpc3QnO1xuaW1wb3J0IHsgQ2hldnJvbiB9IGZyb20gJ0B3ZWRnZWtpdC9pY29ucyc7XG5pbXBvcnQgSW5mb0J1dHRvbiBmcm9tICdAd2VkZ2VraXQvaW5mby1idXR0b24nO1xuaW1wb3J0IHsgRmllbGRTdGF0dXNXcmFwcGVyLCBSb3cgfSBmcm9tICdAd2VkZ2VraXQvcHJpbWl0aXZlcyc7XG5cbmltcG9ydCB7IFdyYXBwZXIsIE5hdGl2ZURyb3Bkb3duLCBTZWxlY3RSYXcgfSBmcm9tICcuL3N0eWxlZCc7XG5pbXBvcnQgeyBDYXJldCwgRHJvcGRvd25UZXh0LCBMYWJlbCB9IGZyb20gJy4uL0Ryb3Bkb3duJztcbmltcG9ydCB7IERyb3Bkb3duUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRNdWx0aXNlbGVjdExhYmVsLCBnZXRTZWxlY3RMYWJlbCB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgTmF0aXZlU2VsZWN0ID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgKHByb3BzOiBEcm9wZG93blByb3BzLCBmb3J3YXJkZWRSZWY6IFJlYWN0LlJlZjxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB1dWlkUmVmID0gdXNlUmVmKHV1aWQoKSk7XG5cbiAgICBjb25zdCBbY2hldnJvbkRvd24sIHNldENoZXZyb25Eb3duXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gICAgY29uc3QgZHJvcGRvd25Qcm9wczoge1xuICAgICAgJ2FyaWEtbGFiZWwnPzogc3RyaW5nO1xuICAgICAgJ2RhdGEtY3knPzogc3RyaW5nO1xuICAgIH0gPSB7fTtcblxuICAgIGlmIChwcm9wcy5sYWJlbEhpZGRlbikge1xuICAgICAgZHJvcGRvd25Qcm9wc1snYXJpYS1sYWJlbCddID0gcHJvcHMubGFiZWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIC8vIFRPRE8gW0pVTi0xMTkzXSBNaWdyYXRlIHRoZXNlIHByb3BzIHRvIHRoZSBsYWJlbCBpbnNpZGUgb2YgTXVsdGlzZWxlY3QgYW5kIFJlbW92ZSBGaWVsZFN0YXR1c1dyYXBwZXJcbiAgICAgIDxGaWVsZFN0YXR1c1dyYXBwZXJcbiAgICAgICAgY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9XG4gICAgICAgIGRpc2FibGVkPXtwcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgcmVhZE9ubHk9e3Byb3BzLnJlYWRPbmx5fVxuICAgICAgPlxuICAgICAgICB7IXByb3BzLmxhYmVsSGlkZGVuICYmIChcbiAgICAgICAgICA8Um93IGNlbnRlcj5cbiAgICAgICAgICAgIDxMYWJlbCBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9IGh0bWxGb3I9e3V1aWRSZWYuY3VycmVudH0gcmVxdWlyZWQ9e3Byb3BzLnJlcXVpcmVkfT5cbiAgICAgICAgICAgICAge3Byb3BzLmxhYmVsfVxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIHtwcm9wcy5pbmZvICYmIDxJbmZvQnV0dG9uIGluZm89e3Byb3BzLmluZm99IHRhYkluZGV4PXtwcm9wcy50YWJJbmRleH0gLz59XG4gICAgICAgICAgPC9Sb3c+XG4gICAgICAgICl9XG4gICAgICAgIDxXcmFwcGVyPlxuICAgICAgICAgIDxTZWxlY3RSYXdcbiAgICAgICAgICAgIG11bHRpcGxlXG4gICAgICAgICAgICByZXF1aXJlZD17cHJvcHMucmVxdWlyZWR9XG4gICAgICAgICAgICBvbkJsdXI9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIHNldENoZXZyb25Eb3duKHRydWUpO1xuICAgICAgICAgICAgICBpZiAocHJvcHMub25CbHVyKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMub25CbHVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PlxuICAgICAgICAgICAgICBwcm9wcy5vbkNoYW5nZShcbiAgICAgICAgICAgICAgICBbLi4uZS50YXJnZXQuc2VsZWN0ZWRPcHRpb25zXS5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlKSxcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbkZvY3VzPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRDaGV2cm9uRG93bihmYWxzZSk7XG4gICAgICAgICAgICAgIGlmIChwcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMub25Gb2N1cyhlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHsuLi5kcm9wZG93blByb3BzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9wcy5vcHRpb25zLm1hcCgob3B0aW9uOiBPcHRpb25Qcm9wcykgPT4gKFxuICAgICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICAgdmFsdWU9e29wdGlvbi5pZH1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17ISFwcm9wcy52YWx1ZS5maW5kKCh2YWx1ZSkgPT4gdmFsdWUgPT09IG9wdGlvbi5pZCl9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e29wdGlvbi5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9TZWxlY3RSYXc+XG4gICAgICAgICAgPE5hdGl2ZURyb3Bkb3duXG4gICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XG4gICAgICAgICAgICBpbnZhbGlkPXtwcm9wcy5pbnZhbGlkfVxuICAgICAgICAgICAgbGFiZWxIaWRkZW49e3Byb3BzLmxhYmVsSGlkZGVufVxuICAgICAgICAgICAgcmVhZE9ubHk9e3Byb3BzLnJlYWRPbmx5fVxuICAgICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgICAgICBzdGF0dXM9e3Byb3BzLnN0YXR1c31cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RHJvcGRvd25UZXh0XG4gICAgICAgICAgICAgIGh0bWxGb3I9e3V1aWRSZWYuY3VycmVudH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgICAgICAgICByZXF1aXJlZD17cHJvcHMucmVxdWlyZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gZ2V0TXVsdGlzZWxlY3RMYWJlbCh7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHByb3BzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwcm9wcy5wbGFjZWhvbGRlciB8fCAnU2VsZWN0IG9wdGlvbihzKScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBnZXRTZWxlY3RMYWJlbCh7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHByb3BzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwcm9wcy5wbGFjZWhvbGRlciB8fCAnU2VsZWN0IG9uZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9Ecm9wZG93blRleHQ+XG4gICAgICAgICAgICA8Q2FyZXQ+XG4gICAgICAgICAgICAgIDxDaGV2cm9uXG4gICAgICAgICAgICAgICAgY29sb3I9e3Byb3BzLmRpc2FibGVkID8gJ040MDAnIDogJ042MDAnfVxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbj17Y2hldnJvbkRvd24gPyAnZG93bicgOiAndXAnfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJldD5cbiAgICAgICAgICA8L05hdGl2ZURyb3Bkb3duPlxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgICA8L0ZpZWxkU3RhdHVzV3JhcHBlcj5cbiAgICApO1xuICB9LFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0O1xuIiwgImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5jb25zdCBNb2JpbGVTZWxlY3RXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB6LWluZGV4OiAwO1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgTW9iaWxlU2VsZWN0V3JhcHBlcjtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgRHJvcGRvd25XcmFwcGVyIH0gZnJvbSAnLi4vLi4vRHJvcGRvd24nO1xuXG5leHBvcnQgZGVmYXVsdCBzdHlsZWQoRHJvcGRvd25XcmFwcGVyKWBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB6LWluZGV4OiAtMTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuYDtcbiIsICJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgVXBkYXRlZElucHV0TWl4aW4gfSBmcm9tICdAd2VkZ2VraXQvcHJpbWl0aXZlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZC5zZWxlY3RgXG4gICR7VXBkYXRlZElucHV0TWl4aW59O1xuICBhcHBlYXJhbmNlOiBub25lO1xuICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3gtc2hhZG93OiBub25lO1xuICB3aWR0aDogMTAwJTtcbmA7XG4iLCAiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ0BkbXNpL2NvcmUnO1xuXG5pbXBvcnQgeyBEcm9wZG93blByb3BzLCBTZWxlY3RQcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IERyb3Bkb3duLCBOYXRpdmUgfSBmcm9tICcuLi9zaGFyZWQnO1xuXG5jb25zdCBTZWxlY3QgPSBSZWFjdC5mb3J3YXJkUmVmKFxuICAoXG4gICAgcHJvcHM6IE9taXQ8RHJvcGRvd25Qcm9wcywga2V5b2YgU2VsZWN0UHJvcHMgfCAnYWN0aW9uQmFyJz4gJiBTZWxlY3RQcm9wcyxcbiAgICByZWY/OiBSZWFjdC5SZWY8SFRNTERpdkVsZW1lbnQ+LFxuICApID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gcHJvcHMuZGVsaWJsZVxuICAgICAgPyBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IHR5cGVvZiBwcm9wcy5kZWxpYmxlID09PSAnb2JqZWN0JyA/IHByb3BzLmRlbGlibGUuaWQgOiAnREVMSUJMRV9PUFRJT05fSUQnLFxuXG4gICAgICAgICAgICBsYWJlbDogKHR5cGVvZiBwcm9wcy5kZWxpYmxlID09PSAnb2JqZWN0JyAmJiBwcm9wcy5kZWxpYmxlLmxhYmVsKSB8fCAnLS0tJyxcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLi4ucHJvcHMub3B0aW9ucyxcbiAgICAgICAgXVxuICAgICAgOiBwcm9wcy5vcHRpb25zO1xuXG4gICAgY29uc3QgdmFsdWUgPSBbcHJvcHMudmFsdWVdO1xuXG4gICAgY29uc3Qgb25DaGFuZ2UgPSAoXG4gICAgICBuZXdWYWx1ZTogc3RyaW5nW10sXG4gICAgICBldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4gfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4sXG4gICAgKSA9PiB7XG4gICAgICBwcm9wcy5vbkNoYW5nZShuZXdWYWx1ZVswXSB8fCAnJywgZXZlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge2Jyb3dzZXIubW9iaWxlID8gKFxuICAgICAgICAgIDxOYXRpdmUgey4uLnByb3BzfSBvcHRpb25zPXtvcHRpb25zfSByZWY9e3JlZn0gdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPERyb3Bkb3duIHsuLi5wcm9wc30gb3B0aW9ucz17b3B0aW9uc30gcmVmPXtyZWZ9IHZhbHVlPXt2YWx1ZX0gb25DaGFuZ2U9e29uQ2hhbmdlfSAvPlxuICAgICAgICApfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfSxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7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
