import React, { SyntheticEvent } from 'react';
import type { OptionProps } from '@wedgekit/checkbox-list';
export type { OptionProps } from '@wedgekit/checkbox-list';
export declare type ActionBarProps = {
    clearAll?: boolean | string;
    selectAll?: boolean | string;
};
export declare type DropdownProps = {
    actionBar?: ActionBarProps | boolean;
    className?: string;
    disabled?: boolean;
    filter?: boolean;
    filterPlaceholder?: string;
    forwardedRef?: React.Ref<HTMLDivElement>;
    info?: {
        title: string;
        content?: string;
        link?: {
            url: string;
            label: string;
        };
    };
    invalid?: boolean;
    label: string;
    labelHidden?: boolean;
    multiple?: boolean;
    options: OptionProps[];
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    status?: 'default' | 'error' | 'success' | 'pending';
    tabIndex?: number;
    value: string[];
    onBlur?: (e?: Event | SyntheticEvent) => void;
    onChange: (value: string[], event: React.MouseEvent<HTMLDivElement> | React.ChangeEvent<HTMLSelectElement>) => void;
    onFocus?: (e?: Event | SyntheticEvent) => void;
};
export declare type SelectProps = {
    delible?: boolean | {
        id: string;
        label: string;
    };
    value: string;
    onChange: (value: string, event: React.MouseEvent<HTMLDivElement> | React.ChangeEvent<HTMLSelectElement>) => void;
};
export declare type ListProps = {
    actionBar?: ActionBarProps | boolean;
    filter?: boolean;
    filterPlaceholder?: string;
    id?: string;
    label: string;
    multiple?: boolean;
    options: OptionProps[];
    toggleRef: React.RefObject<HTMLDivElement>;
    value: string[];
    onBlur?: (e: React.FocusEvent) => void;
    onChange: (value: string[], event: React.MouseEvent<HTMLDivElement> | React.ChangeEvent<HTMLSelectElement>) => void;
    onEscape: (e?: Event | React.SyntheticEvent<MouseEvent | KeyboardEvent>) => void;
    onSelect?: (e: React.FocusEvent) => void;
};
