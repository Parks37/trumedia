import React, { ReactNode } from 'react';
import { FocusOn } from 'react-focus-on';
declare type Side = 'top' | 'bottom' | 'left' | 'right';
declare type Align = 'start' | 'center' | 'end';
export declare type Bearings = {
    side?: Side;
    align?: Align;
    offset?: number;
    fallback?: [Side, Align];
};
export declare type Position = {
    top?: number;
    left?: number;
};
export interface Props extends React.ComponentProps<typeof FocusOn> {
    as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;
    bearings?: Bearings;
    children: ReactNode;
    className?: string;
    node: HTMLElement;
    onExit: (e: Event | React.SyntheticEvent<MouseEvent | KeyboardEvent>) => void;
}
declare const Popover: React.ForwardRefExoticComponent<Pick<Props, "style" | "className" | "children" | "key" | "autoFocus" | "as" | "enabled" | "scrollLock" | "focusLock" | "returnFocus" | "shouldIgnore" | "onEscapeKey" | "onClickOutside" | "onActivation" | "onDeactivation" | "noIsolation" | "inert" | "allowPinchZoom" | "shards" | "onExit" | "bearings" | "node"> & React.RefAttributes<unknown>>;
export default Popover;
