import fs from 'fs/promises';
import ncp from 'ncp';
import path from 'path';
import { fileURLToPath } from 'url';
import messages from '@utils/messages';
import createPackage from './utils/createPackage';
import updateApplicationNameField from './utils/updateApplicationNameField';
import { getTemplate } from './utils/templateOptions';
const { ncp: copy } = ncp;
const scaffold = async (options) => {
    const outputDirectory = path.resolve(process.cwd(), options.dir || options.name);
    copy(path.resolve(path.dirname(fileURLToPath(import.meta.url)), getTemplate(options)), outputDirectory, (err) => {
        if (err) {
            process.stderr.write(messages.warning('Scaffolding not created', ...err.map(({ message }) => message)));
            process.exit(1);
        }
        if (!options.template || options.template === 'force') {
            updateApplicationNameField(options, outputDirectory);
        }
    });
    const pkg = await createPackage(options);
    await fs.writeFile(path.resolve(outputDirectory, 'package.json'), JSON.stringify(pkg, null, 2));
};
export default scaffold;
