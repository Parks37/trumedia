import chalk from 'chalk';
import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';
import messages from '@utils/messages';
import filterArgs from '@utils/filterArgs';
import createViteConfig from '@utils/createViteConfig';
const flags = ['graphql-proxy'];
const handleOutput = (command, args) => {
    const server = spawn(command, args, { shell: true, stdio: 'inherit' });
    server.on('error', (error) => process.stderr.write(messages.error(error.message)));
    server.on('exit', (code) => {
        if (code !== 1) {
            process.stdout.write(messages.text('server stopped'));
        }
        process.exit(code || undefined);
    });
};
const start = async (opts) => {
    if (opts.script) {
        handleOutput('node', [
            '--loader',
            'ts-node/esm',
            '--experimental-specifier-resolution=node',
            '--no-warnings',
            './src/index.ts',
        ]);
    }
    else {
        await createViteConfig(opts);
        process.stdout.write(messages.text(chalk.bold('starting dev server')));
        const config = [
            '-c',
            path.resolve(path.dirname(fileURLToPath(import.meta.url)), 'configs/vite.config.js'),
        ];
        const options = filterArgs(process.argv.slice(3), flags);
        handleOutput('vite', [...config, '--open', '-l', 'info', ...options]);
    }
};
export default start;
