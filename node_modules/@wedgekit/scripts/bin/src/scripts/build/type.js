import { spawn } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import messages from '@utils/messages';
import tsconfig from './tsconfig';
const onError = (message) => {
    process.stderr.write(messages.error('TypeScript definitions failed'));
    process.stderr.write(messages.warning(message));
    process.exit(1);
};
const define = ({ watch }) => {
    const args = [
        '--project',
        `${path.resolve(path.dirname(fileURLToPath(import.meta.url)), '../temp/tsconfig.json')}`,
    ];
    const tsc = spawn('tsc', watch ? [...args, '-w'] : args, { shell: true });
    tsc.stdout.on('data', (data) => process.stdout.write(messages.text(data)));
    tsc.stderr.on('data', onError);
    tsc.on('error', (error) => onError(error.message));
    tsc.on('exit', (code) => {
        if (code !== 1) {
            process.stdout.write(messages.success('TypeScript definitions complete'));
        }
        process.exit(code || undefined);
    });
};
const mkdir = async () => {
    await fs.mkdir(path.resolve(path.dirname(fileURLToPath(import.meta.url)), '../temp'), {
        recursive: true,
    });
    await fs.writeFile(path.resolve(path.dirname(fileURLToPath(import.meta.url)), '../temp/tsconfig.json'), JSON.stringify(tsconfig));
};
const type = (opts) => {
    process.stdout.write(messages.text('creating TypeScript definitions'));
    mkdir()
        .then(() => {
        define(opts);
    })
        .catch((e) => onError(e.message));
};
export default type;
