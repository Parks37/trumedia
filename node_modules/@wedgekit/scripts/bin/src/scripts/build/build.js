import chalk from 'chalk';
import { spawn } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { readPackageUpSync } from 'read-pkg-up';
import { fileURLToPath } from 'url';
import filterArgs from '@utils/filterArgs';
import messages from '@utils/messages';
import createViteConfig from '@utils/createViteConfig';
import bundle from './bundle';
import type from './type';
const flags = [
    'clean',
    'c',
    'dev',
    'd',
    'package',
    'p',
    'script',
    's',
    'types-only',
    't',
    'watch',
    'w',
];
const directory = process.cwd();
const build = async (opts) => {
    const pkg = readPackageUpSync()?.packageJson;
    process.stdout.write(messages.header('building', chalk.bold(`${pkg.name}`)));
    if (opts.package || opts.script) {
        const clean = async () => {
            if (opts.clean) {
                await fs.rm(path.resolve(directory, 'dist'), { recursive: true, force: true });
            }
        };
        void clean().then(() => {
            if (opts.script || !opts['types-only']) {
                void bundle(pkg, opts);
            }
            if (!opts.script)
                type(opts);
        });
    }
    else {
        await createViteConfig(opts);
        const viteArgs = filterArgs(process.argv.slice(3), flags);
        const config = [
            '-c',
            path.resolve(path.dirname(fileURLToPath(import.meta.url)), 'configs/vite.config.js'),
        ];
        const minifySettings = opts.dev ? [] : ['--minify'];
        const viteBuild = spawn('vite', ['build', ...config, ...minifySettings, ...viteArgs], {
            shell: true,
        });
        viteBuild.stdout.on('data', (data) => process.stdout.write(messages.text(data)));
        viteBuild.stderr.on('data', (data) => process.stderr.write(messages.error(data)));
        viteBuild.on('error', (error) => process.stderr.write(messages.error(error.message)));
        viteBuild.on('exit', (code) => {
            if (code !== 1) {
                process.stdout.write(messages.text('server stopped'));
            }
            process.exit(code || undefined);
        });
    }
};
export default build;
