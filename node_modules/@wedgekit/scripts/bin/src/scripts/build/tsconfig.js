import { existsSync } from 'fs';
import path from 'path';
import slash from 'slash';
import { fileURLToPath } from 'url';
const getConfigPath = () => {
    const currentPath = slash(path.resolve(path.dirname(fileURLToPath(import.meta.url)), '../temp'));
    const configPath = slash(path.relative(process.cwd(), 'tsconfig.json'));
    if (existsSync(configPath)) {
        const relativePath = slash(path.relative(currentPath, configPath));
        // Getting rid of the .json because the .tsconfig apparently doesn't like having it for the extends property.
        const index = relativePath.lastIndexOf('.');
        return relativePath.substring(0, index);
    }
    return undefined;
};
export default {
    extends: getConfigPath(),
    include: [slash(path.resolve(process.cwd(), 'src/**/*'))],
    exclude: [
        slash(path.resolve(process.cwd(), '**/*.test.ts')),
        slash(path.resolve(process.cwd(), 'dist')),
        slash(path.resolve(process.cwd(), '../../', 'node_modules/**/*')),
        slash(path.resolve(process.cwd(), 'node_modules/**/*')),
    ],
    compilerOptions: {
        allowSyntheticDefaultImports: true,
        declaration: true,
        emitDeclarationOnly: true,
        esModuleInterop: true,
        jsx: 'react',
        moduleResolution: 'node',
        outDir: slash(path.resolve(process.cwd(), 'dist')),
        skipLibCheck: true,
        strict: true,
        target: 'ES2019',
    },
};
