// @ts-ignore
import esbuild from 'esbuild';
import { globby } from 'globby';
import messages from '@utils/messages';
const bundle = async (pkg, opts) => {
    process.stdout.write(messages.text('bundling package'));
    const watchOpts = {
        onRebuild: (error) => {
            if (error) {
                process.stderr.write(messages.error(error));
            }
            else {
                process.stdout.write(messages.text('package built'));
            }
        },
    };
    const external = [
        ...Object.keys(pkg.dependencies || {}),
        ...Object.keys(pkg.peerDependencies || {}),
    ];
    if (opts.script) {
        // Node Script Bundle
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
        esbuild
            .build({
            entryPoints: ['src/index.ts'],
            external,
            bundle: true,
            platform: 'node',
            target: `node14.0`,
            format: 'esm',
            outdir: 'bin',
            minify: !opts.dev,
            sourcemap: opts.dev ? 'inline' : false,
            watch: (opts.watch && watchOpts),
        })
            .then(() => process.stdout.write(messages.success('node bundle created')))
            .catch(() => process.exit(1));
    }
    else {
        // ESM Bundle
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
        esbuild
            .build({
            entryPoints: ['src/index.ts'],
            external,
            bundle: true,
            target: 'es2019',
            format: 'esm',
            outdir: 'dist',
            minify: !opts.dev,
            sourcemap: opts.dev ? 'inline' : false,
            outExtension: {
                '.js': '.esm.js',
            },
            watch: (opts.watch && watchOpts),
        })
            .then(() => process.stdout.write(messages.success('esm bundle created')))
            .catch(() => process.exit(1));
        // CJS Bundle
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
        esbuild
            .build({
            entryPoints: ['src/index.ts'],
            external,
            bundle: true,
            format: 'cjs',
            target: 'node12',
            outdir: 'dist',
            minify: !opts.dev,
            sourcemap: opts.dev ? 'inline' : false,
            outExtension: {
                '.js': '.cjs',
            },
            watch: (opts.watch && watchOpts),
        })
            .then(() => process.stdout.write(messages.success('cjs bundle created')))
            .catch(() => process.exit(1));
        if (opts.unbundled) {
            // Unbundled files build
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
            esbuild
                .build({
                entryPoints: await globby('src/**/*.ts'),
                bundle: false,
                target: 'es2019',
                format: 'esm',
                outdir: 'dist',
                minify: !opts.dev,
                sourcemap: opts.dev ? 'inline' : false,
                watch: (opts.watch && watchOpts),
            })
                .then(() => process.stdout.write(messages.success('unbundled files added')))
                .catch(() => process.exit(1));
        }
    }
};
export default bundle;
