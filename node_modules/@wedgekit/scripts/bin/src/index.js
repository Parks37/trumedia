#!/usr/bin/env node
import path from 'path';
import sade from 'sade';
import { readPackageUpSync } from 'read-pkg-up';
import { fileURLToPath } from 'url';
import build from './scripts/build';
import create from './scripts/create';
import start from './scripts/start';
const wedgekit = sade('wedgekit');
wedgekit.version(readPackageUpSync({ cwd: path.dirname(fileURLToPath(import.meta.url)) })?.packageJson
    .version);
wedgekit
    .option('--package -p --library -l', 'Indicates use is for package development (as opposed to a node script or web app)')
    .option('-s, --script', 'Indicates use as a node script, for example for use in GitHub actions (as opposed to a package or web app)');
wedgekit
    .command('create <name>')
    .describe('creates a new A2W web app')
    .option('-d, --dir', 'Defines the location of the application; defaults to <name>')
    .example('create test --dir apps/test')
    .option('--desc', 'Adds a description to the scaffolded package.json')
    .example('create test -desc "My Application"')
    .option('-template', 'Defines the template pattern to use; available options are force and basic; defaults to force')
    .example('create test --template basic')
    .action(create);
wedgekit
    .command('build')
    .describe('builds the src directory; expects an src/index.ts entry file.')
    .option('-c, --clean', 'Removes the dist directory before building package')
    .option('-d, --dev', 'Builds with dev options set to true; used for local development')
    .option('-u, --unbundled', 'Adds the unbundled files in addition to the ESM and CJS bundles')
    .option('-t, --types-only', 'Only builds type declaration files; used for type-only packages')
    .option('-w, --watch', 'Watches source files for changes that would invalidate the build and rebuilds')
    .action(build);
wedgekit
    .command('start')
    .describe('starts a dev server for local app development')
    .option('--graphql-proxy', 'Sets up a proxy middleware to the desired graphql endpoint.')
    .example('start --graphql-proxy https://myBranch.agility.dmsi.io/graphql')
    .action(start);
wedgekit.parse(process.argv);
