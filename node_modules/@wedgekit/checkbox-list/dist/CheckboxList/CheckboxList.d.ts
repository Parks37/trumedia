/// <reference types="styled-components" />
import React from 'react';
export declare const Option: import("styled-components").StyledComponent<React.ForwardRefExoticComponent<{
    className?: string | undefined;
    id?: string | undefined;
    indeterminate?: boolean | undefined;
    info?: {
        title: string;
        content?: string | undefined;
        link?: {
            url: string;
            label: string;
        } | undefined;
    } | undefined;
    label: string;
    labelHidden?: boolean | undefined;
    name?: string | undefined;
    onChange: (checked: boolean, id: string, event: React.ChangeEvent<HTMLInputElement>) => void;
    required?: boolean | undefined;
    status?: "default" | "error" | "success" | "pending" | undefined;
    tabIndex?: number | undefined;
    value: boolean;
} & import("@wedgekit/primitives").OptionMixinProps & Omit<React.InputHTMLAttributes<HTMLInputElement>, "value" | "type" | "onChange"> & React.RefAttributes<HTMLInputElement>>, any, {}, never>;
export declare type OptionProps = {
    disabled?: boolean;
    label: string;
    id: string;
};
declare type CheckboxListProps = {
    allowMultiple?: boolean;
    className?: string;
    disabled?: boolean;
    filter?: string;
    forwardRef?: React.Ref<HTMLInputElement>;
    label: string;
    options: OptionProps[];
    tabIndex?: number;
    value: string[];
    onBlur?: (event: React.FocusEvent) => void;
    onChange: (value: string[], event: React.MouseEvent<HTMLInputElement>) => void;
    onFocus?: (event: React.SyntheticEvent) => void;
    onKeyDown?: (event: React.KeyboardEvent<Element>) => void;
};
declare const CheckboxList: React.ForwardRefExoticComponent<CheckboxListProps & React.RefAttributes<HTMLInputElement>>;
export default CheckboxList;
