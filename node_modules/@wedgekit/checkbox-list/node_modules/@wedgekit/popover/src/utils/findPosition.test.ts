import test from 'ava';

import findPosition, { DEFAULT_OFFSET } from './findPosition';

const anchor1: DOMRect = {
  bottom: 387.20001220703125,
  height: 40,
  left: 363.5375061035156,
  right: 460.46250915527344,
  top: 347.20001220703125,
  width: 96.92500305175781,
  x: 363.5375061035156,
  y: 347.20001220703125,
  toJSON: () => {},
};

const anchor2: DOMRect = {
  bottom: 149.8625030517578,
  height: 40,
  left: 363.5375061035156,
  right: 460.46250915527344,
  top: 109.86250305175781,
  width: 96.92500305175781,
  x: 363.5375061035156,
  y: 109.86250305175781,
  toJSON: () => {},
};

const anchor3: DOMRect = {
  bottom: 149.8625030517578,
  height: 40,
  left: 161.53750610351562,
  right: 258.46250915527344,
  top: 109.86250305175781,
  width: 96.92500305175781,
  x: 161.53750610351562,
  y: 109.86250305175781,
  toJSON: () => {},
};

const floater: DOMRect = {
  bottom: 783.1999893188477,
  height: 50.400001525878906,
  left: 8,
  right: 136.41250610351562,
  top: 732.7999877929688,
  width: 128.41250610351562,
  x: 8,
  y: 732.7999877929688,
  toJSON: () => {},
};

test('find position should default to bottom | start', (t) => {
  t.like(findPosition(anchor1, floater), {
    left: anchor1.left,
    top: anchor1.bottom + DEFAULT_OFFSET,
  });

  t.like(findPosition(anchor2, floater), {
    left: anchor2.left,
    top: anchor2.bottom + DEFAULT_OFFSET,
  });

  t.like(findPosition(anchor3, floater), {
    left: anchor3.left,
    top: anchor3.bottom + DEFAULT_OFFSET,
  });

  t.deepEqual(findPosition(anchor1, floater), findPosition(anchor1, floater, { side: 'bottom' }));
  t.deepEqual(findPosition(anchor1, floater), findPosition(anchor1, floater, { align: 'start' }));
  t.deepEqual(
    findPosition(anchor1, floater),
    findPosition(anchor1, floater, { align: 'start', side: 'bottom' }),
  );
});

test('should position correctly to start | center | end', (t) => {
  t.like(findPosition(anchor3, floater, { align: 'start' }), {
    left: anchor3.left,
    top: anchor3.bottom + DEFAULT_OFFSET,
  });

  t.like(findPosition(anchor3, floater, { align: 'end' }), {
    left: anchor3.right - floater.width,
    top: anchor3.bottom + DEFAULT_OFFSET,
  });

  t.like(findPosition(anchor3, floater, { align: 'center' }), {
    left: anchor3.left + (anchor3.width / 2 - floater.width / 2),
    top: anchor3.bottom + DEFAULT_OFFSET,
  });
});

test('should position correctly to start | center | end when side is set to top', (t) => {
  t.like(findPosition(anchor3, floater, { side: 'top' }), {
    left: anchor3.left,
    top: anchor3.top - floater.height - DEFAULT_OFFSET,
  });

  t.deepEqual(
    findPosition(anchor3, floater, { side: 'top', align: 'start' }),
    findPosition(anchor3, floater, { side: 'top' }),
  );

  t.like(findPosition(anchor3, floater, { side: 'top', align: 'end' }), {
    left: anchor3.right - floater.width,
    top: anchor3.top - floater.height - DEFAULT_OFFSET,
  });

  t.like(findPosition(anchor3, floater, { side: 'top', align: 'center' }), {
    left: anchor3.left + (anchor3.width / 2 - floater.width / 2),
    top: anchor3.top - floater.height - DEFAULT_OFFSET,
  });
});

test('it should position the popover correctly when the side is left', (t) => {
  t.deepEqual(
    findPosition(anchor3, floater, { side: 'left', align: 'start' }),
    findPosition(anchor3, floater, { side: 'left' }),
  );

  t.like(findPosition(anchor3, floater, { side: 'left' }), {
    left: anchor3.left - floater.width - DEFAULT_OFFSET,
    top: anchor3.top,
  });

  t.like(findPosition(anchor3, floater, { side: 'left', align: 'end' }), {
    left: anchor3.left - floater.width - DEFAULT_OFFSET,
    top: anchor3.bottom - floater.height,
  });

  t.like(findPosition(anchor3, floater, { side: 'left', align: 'center' }), {
    left: anchor3.left - floater.width - DEFAULT_OFFSET,
    top: anchor3.top + (anchor3.height / 2 - floater.height / 2),
  });
});

test('it should position the popover correctly when the side is right', (t) => {
  t.deepEqual(
    findPosition(anchor3, floater, { side: 'right', align: 'start' }),
    findPosition(anchor3, floater, { side: 'right' }),
  );

  t.like(findPosition(anchor3, floater, { side: 'right' }), {
    left: anchor3.right + DEFAULT_OFFSET,
    top: anchor3.top,
  });

  t.like(findPosition(anchor3, floater, { side: 'right', align: 'end' }), {
    left: anchor3.right + DEFAULT_OFFSET,
    top: anchor3.bottom - floater.height,
  });

  t.like(findPosition(anchor3, floater, { side: 'right', align: 'center' }), {
    left: anchor3.right + DEFAULT_OFFSET,
    top: anchor3.top + (anchor3.height / 2 - floater.height / 2),
  });
});

test('should handle the offset', (t) => {
  t.like(findPosition(anchor3, floater, { side: 'right', align: 'end', offset: 20 }), {
    left: anchor3.right + 20,
    top: anchor3.bottom - floater.height,
  });
});

test('should handle the fallback', (t) => {
  t.plan(0);
});
