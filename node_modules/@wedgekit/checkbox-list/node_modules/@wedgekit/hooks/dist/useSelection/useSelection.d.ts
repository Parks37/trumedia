import React from 'react';
declare type Options<T> = {
    /**
     * Determines if horizontal key presses should trigger a selection
     *
     * @default false
     */
    allowHorizontalKeyPress?: boolean;
    /**
     * Determines if multiple items may be selected
     *
     * @default true
     */
    multiple?: boolean;
    /**
     * Determines the index of the selected item from it's corresponding event. Index is assumed
     * to correlate to the item's index in `items`
     *
     * @param event The event resulting from interacting with an item in the list
     */
    getClickIndex: (event: React.SyntheticEvent) => number;
    /**
     * Gets a unique identifier for a given item. Used to determine item equality.
     *
     * @param item The item that needs identification
     * @returns string a unique identifier for the item, or undefined
     */
    getID: (item?: T) => string | undefined;
    /**
     * The list of all items, regardless of selection state
     */
    items: T[];
    /**
     * The number of items per row. Taken as a function to allow resizing the window to modify this
     * value dynamically.
     *
     * @default () => 1
     */
    itemsPerRow?: () => number;
    /**
     * Callback to modify the list of selected items
     *
     * @param newSelection The new list of selected items, in descending order of recency of selection
     */
    onChange: (newSelection: T[], event: React.KeyboardEvent | React.MouseEvent<HTMLElement>) => void;
    /**
     * The list of selected items
     */
    selected: T[] | undefined;
};
declare type ReturnType = {
    /**
     * The index of the item that currently has focus
     */
    focusIndex: number;
    /**
     * The callback that should be given to all clickable items
     *
     * @param event The event fired by clicking the item
     */
    onClick: (event: React.MouseEvent<HTMLElement>) => void;
};
/**
 * A hook to handle a list or gallery of items, each of which can be clicked, with a combination of
 * shift, control, or neither pressed.
 *
 * @returns {ReturnType} An onClick callback to be given to
 * the items on display
 */
declare const useSelection: <T>({ allowHorizontalKeyPress, multiple, getClickIndex, getID, items, itemsPerRow, selected, onChange, }: Options<T>) => ReturnType;
export default useSelection;
